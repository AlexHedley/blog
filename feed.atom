<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<id>https://alexhedley.github.io/blog</id>
	<title>Alex Hedley</title>
	<link rel="self" href="https://alexhedley.github.io/blog" />
	<rights>Copyright © 2025</rights>
	<updated>2025-06-06T21:09:33Z</updated>
	<logo>https://alexhedley.github.io/blog/images/banner.png</logo>
	<subtitle>Welcome to my blog!</subtitle>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/dotnet-by-example</id>
		<title>.NET by Example</title>
		<author>
			<name>AlexHedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/dotnet-by-example" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/dotNET/dotNET.png" />
		<updated>2025-06-06T00:00:00Z</updated>
		<content>&lt;!-- .NET by Example --&gt;
&lt;!-- ![.NET](images/dotNET/dotNET.png ".NET") --&gt;
&lt;p&gt;In this post I will explain how I built &lt;strong&gt;.NET by Example&lt;/strong&gt;, a clone of &lt;a href="https://gobyexample.com/"&gt;Go by Example&lt;/a&gt;, using the updated &lt;a href="https://alexhedley.github.io/blog/nocco"&gt;nocco&lt;/a&gt; tool I've recently been working on.&lt;/p&gt;
&lt;p&gt;I've modified the code a little to take a list of files: &lt;code&gt;.cs&lt;/code&gt;, &lt;code&gt;.vb&lt;/code&gt;, &lt;code&gt;.fs&lt;/code&gt;, in a folder, with a &lt;code&gt;.bat&lt;/code&gt; to explain how to run the provided scripts and it builds a tabbed page of each of the files.&lt;/p&gt;
&lt;p&gt;It also has a &lt;em&gt;copy&lt;/em&gt; button option to make working with the code a little easier.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/dotNET/byexample/hello-world.png" alt="Hello World" title="Hello World"&gt;&lt;/p&gt;
&lt;p&gt;The home page is then built with the list of the examples.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/dotNET/byexample/home.png" alt="Home" title="Home"&gt;&lt;/p&gt;
&lt;p&gt;If you have any ideas of other examples please add a new 💡&lt;a href="https://github.com/AlexHedley/dotnetbyexample/discussions/new?category=ideas"&gt;Discussion&lt;/a&gt; item. I'll be working on adding more in the near future.&lt;/p&gt;
&lt;p&gt;I added a build and deploy &lt;a href="https://github.com/AlexHedley/dotnetbyexample/blob/main/.github/workflows/build-deploy.yml"&gt;script&lt;/a&gt; via GitHub Actions and deployed it via GitHub Pages: &lt;a href="https://alexhedley.github.io/dotnetbyexample"&gt;https://alexhedley.github.io/dotnetbyexample&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="code"&gt;&amp;lt;/&amp;gt; Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexhedley.github.io/dotnetbyexample"&gt;https://alexhedley.github.io/dotnetbyexample&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/dotnetbyexample"&gt;https://github.com/AlexHedley/dotnetbyexample&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/mmcgrana/gobyexample"&gt;https://github.com/mmcgrana/gobyexample&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://gobyexample.com/"&gt;https://gobyexample.com/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET by Example is a hands-on introduction to .NET using annotated example programs.</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/dotnet-nocco-github-actions</id>
		<title>Deploying .NET nocco using GitHub Action</title>
		<author>
			<name>AlexHedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/dotnet-nocco-github-actions" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/dotNET/dotNET.png" />
		<updated>2025-05-13T00:00:00Z</updated>
		<content>&lt;!-- .NET nocco using GitHub Action --&gt;
&lt;!-- ![.NET](images/dotNET/dotNET.png ".NET") --&gt;
&lt;p&gt;In my previous blog post &lt;a href="https://alexhedley.github.io/blog/dotnet-nocco"&gt;.NET nocco&lt;/a&gt; I explained upgrading an old version of &lt;strong&gt;nocco&lt;/strong&gt; to the latest, and making it a &lt;a href="https://alexhedley.github.io/blog/dotnet-tool-example"&gt;.NET tool&lt;/a&gt;. Now that I have both of these setup and configured I can use &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; &lt;a href="https://pages.github.com/"&gt;Pages&lt;/a&gt; to deploy my code.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;jobs:
    steps:
     - name: ⬇️ Install nocco
       run: dotnet tool install --global Nocco --version 0.2.0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It needs to be &lt;strong&gt;N&lt;/strong&gt;occo with a capital N as I forgot to add &lt;code&gt;&amp;lt;ToolCommandName&amp;gt;nocco&amp;lt;/ToolCommandName&amp;gt;&lt;/code&gt; to the &lt;code&gt;.csproj&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Once that is installed you can navigate to your source folder then run the tool.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;    - name: 📄 Generate Docs
      run: |
        cd src
        Nocco *.cs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once the files have been generated you can save them to a &lt;code&gt;gh-pages&lt;/code&gt; branch and deploy them as a static site.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yaml"&gt;    - name: ⬇️ Commit docs to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4.7.3
      with:
        branch: gh-pages
        folder: src/docs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Others are available&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JamesIves/github-pages-deploy-action"&gt;https://github.com/JamesIves/github-pages-deploy-action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/deploy-pages"&gt;https://github.com/actions/deploy-pages&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;https://github.com/peaceiris/actions-gh-pages&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As there isn't an index.html page generated if you go to the root page you will get an error. &lt;a href="https://alexhedley.github.io/nocco-example/"&gt;https://alexhedley.github.io/nocco-example/&lt;/a&gt;. Instead go directly to one of the files: &lt;a href="https://alexhedley.github.io/nocco-example/nocco.html"&gt;https://alexhedley.github.io/nocco-example/nocco.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If there were multiple files a picker is generated and added to the top right of the screen where you can switch between all the files.&lt;/p&gt;
&lt;p&gt;See the yaml source for full steps.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/nocco-example/blob/main/.github/workflows/generate-docs-and-deploy.yml"&gt;https://github.com/AlexHedley/nocco-example/blob/main/.github/workflows/generate-docs-and-deploy.yml&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://raw.githubusercontent.com/AlexHedley/nocco-example/refs/heads/main/.github/workflows/generate-docs-and-deploy.yml"&gt;https://raw.githubusercontent.com/AlexHedley/nocco-example/refs/heads/main/.github/workflows/generate-docs-and-deploy.yml&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;&amp;lt;/&amp;gt; Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/nocco-example"&gt;https://github.com/AlexHedley/nocco-example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/nocco"&gt;https://github.com/AlexHedley/nocco&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dontangg/nocco"&gt;https://github.com/dontangg/nocco&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://donwilson.net/nocco/"&gt;http://donwilson.net/nocco/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ashkenas.com/docco/"&gt;https://ashkenas.com/docco/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;In my previous blog post &lt;a href="https://alexhedley.github.io/blog/dotnet-nocco"&gt;.NET nocco&lt;/a&gt; I explained upgrading an old version of &lt;strong&gt;nocco&lt;/strong&gt; to the latest, and making it a &lt;a href="https://alexhedley.github.io/blog/dotnet-tool-example"&gt;.NET tool&lt;/a&gt;. Now that I have both of these setup and configured I can use &lt;a href="https://github.com/"&gt;GitHub&lt;/a&gt; &lt;a href="https://pages.github.com/"&gt;Pages&lt;/a&gt; to deploy my code.&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/dotnet-nocco</id>
		<title>.NET nocco</title>
		<author>
			<name>AlexHedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/dotnet-nocco" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/dotNET/dotNET.png" />
		<updated>2025-05-12T00:00:00Z</updated>
		<content>&lt;!-- .NET nocco --&gt;
&lt;!-- ![.NET](images/dotNET/dotNET.png ".NET") --&gt;
&lt;p&gt;In this post I will talk through how I updated Don Wilson's (&lt;a href="https://github.com/dontangg"&gt;@dontangg&lt;/a&gt;) &lt;strong&gt;nocco&lt;/strong&gt; from .NET Framework v4.0 to .NET (Core) v9.&lt;/p&gt;
&lt;p&gt;So what is nocco? It's a .NET port of &lt;a href="https://ashkenas.com/docco/"&gt;Docco&lt;/a&gt;. What is Docco?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docco is a quick-and-dirty documentation generator, written in &lt;a href="https://coffeescript.org/#literate"&gt;Literate CoffeeScript&lt;/a&gt;. It produces an HTML document that displays your comments intermingled with your code. All prose is passed through &lt;a href="http://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;, and code is passed through &lt;a href="http://highlightjs.org/"&gt;Highlight.js&lt;/a&gt; syntax highlighting. This page is the result of running Docco against its own &lt;a href="https://github.com/jashkenas/docco/blob/master/docco.litcoffee"&gt;source file&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Nocco is a quick-and-dirty, literate-programming-style&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can see an original output of &lt;code&gt;nocco.cs&lt;/code&gt; on &lt;a href="http://donwilson.net/nocco/"&gt;http://donwilson.net/nocco/&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/dotNET/nocco/nocco.cs.html.png" alt="nocco" title="nocco"&gt;&lt;/p&gt;
&lt;p&gt;What does it do? The original takes a list of files, these could be C#, VB.NET, SQL or JS and produces a side by side view of code comments and their respective code.&lt;/p&gt;
&lt;p&gt;From the &lt;code&gt;nocco.cs&lt;/code&gt; page at the Razor section their notes are the following:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Setup the Razor templating engine so that we can quickly pass the data in and generate HTML.
The file &lt;code&gt;Resources\Nocco.cshtml&lt;/code&gt; is read and compiled into a new dll with a type that extends the &lt;code&gt;TemplateBase&lt;/code&gt; class. This new assembly is loaded so that we can create an instance and pass data into it and generate the HTML.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This file was then executed to produce the output, along with the html documentation and syntax highlighted code, you can read more about it on the linked page or in the code itself.&lt;/p&gt;
&lt;p&gt;I've got some experience with building DLLs using &lt;code&gt;Microsoft.CodeAnalysis.CSharp&lt;/code&gt; when I built &lt;a href="https://github.com/alex-hedley/BlazorInteractive"&gt;BlazorInteractive&lt;/a&gt; but this has changed a little from the original &lt;code&gt;CSharpCodeProvider&lt;/code&gt; used here.&lt;/p&gt;
&lt;p&gt;For the first pass I thought it might be easier to not have the code be compiled in the same way, instead I'll just build a Razor page, like before, and then pass the data I needed. Luckily &lt;a href="https://robanderson.dev/"&gt;Rob Anderson&lt;/a&gt; had told me about a method he'd used to do this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Render Razor components outside of ASP.NET Core
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/aspnet/core/blazor/components/render-components-outside-of-aspnetcore?view=aspnetcore-9.0"&gt;https://learn.microsoft.com/en-us/aspnet/core/blazor/components/render-components-outside-of-aspnetcore?view=aspnetcore-9.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/api/microsoft.aspnetcore.components.web.htmlrenderer?view=aspnetcore-9.0"&gt;&lt;code&gt;HtmlRenderer&lt;/code&gt;&lt;/a&gt; to the rescue.&lt;/p&gt;
&lt;p&gt;I made the project use the SDK: &lt;code&gt;Microsoft.NET.Sdk.Razor&lt;/code&gt; then added the &lt;code&gt;Microsoft.AspNetCore.Components.Web&lt;/code&gt; library.&lt;/p&gt;
&lt;p&gt;Next the &lt;code&gt;GenerateHtml()&lt;/code&gt; method was where I got to work updating. Following the above tutorial was very quick. I renamed the original &lt;code&gt;Nocco.cshtml&lt;/code&gt; to &lt;code&gt;Webpage.razor&lt;/code&gt; and added in the corresponding &lt;code&gt;@code {}&lt;/code&gt; and &lt;code&gt;[Parameter]&lt;/code&gt;s. This now allows me to pass a &lt;code&gt;Dictionary&lt;/code&gt; of KVPs matching the Parameter names with the corresponding data types. It didn't like passing the &lt;code&gt;Func&amp;lt;&amp;gt;&lt;/code&gt; directly as an &lt;code&gt;object?&lt;/code&gt; so I made it it's own variable and passed that in.&lt;/p&gt;
&lt;p&gt;Source: &lt;a href="https://github.com/AlexHedley/nocco/blob/d6f7f65e519d66056db67f5c5430f8d9ee94da1a/src/Nocco/Nocco.cs#L116-L153"&gt;https://github.com/AlexHedley/nocco/blob/d6f7f65e519d66056db67f5c5430f8d9ee94da1a/src/Nocco/Nocco.cs#L116-L153&lt;/a&gt;&lt;/p&gt;
&lt;!-- https://raw.githubusercontent.com/AlexHedley/nocco/d6f7f65e519d66056db67f5c5430f8d9ee94da1a/src/Nocco/Nocco.cs --&gt;
&lt;details&gt;
&lt;summary&gt;GenerateHtml&lt;/summary&gt;
&lt;pre&gt;&lt;code class="language-cs"&gt;private static async void GenerateHtml(string source, List&amp;lt;Section&amp;gt; sections)
{
    int depth;
    var destination = GetDestination(source, out depth);
        
    string pathToRoot = string.Concat(Enumerable.Repeat(".." + Path.DirectorySeparatorChar, depth));

    IServiceCollection services = new ServiceCollection();
    services.AddLogging();
    IServiceProvider serviceProvider = services.BuildServiceProvider();
    ILoggerFactory loggerFactory = serviceProvider.GetRequiredService&amp;lt;ILoggerFactory&amp;gt;();
    await using var htmlRenderer = new HtmlRenderer(serviceProvider, loggerFactory);

    var html = await htmlRenderer.Dispatcher.InvokeAsync(async () =&amp;gt;
    {
        Func&amp;lt;string, string&amp;gt; getSourcePath = s =&amp;gt;
            Path.Combine(pathToRoot, Path.ChangeExtension(s.ToLower(), ".html").Substring(2)).Replace('\\', '/');
        var dictionary = new Dictionary&amp;lt;string, object?&amp;gt;
        {
            { "Title", Path.GetFileName(source) },
            { "PathToCss", Path.Combine(pathToRoot, "nocco.css").Replace('\\', '/') },
            { "PathToJs", Path.Combine(pathToRoot, "prettify.js").Replace('\\', '/') },
            { "GetSourcePath", getSourcePath },
            { "Sections", sections },
            { "Sources", _files },
        };

        var parameters = ParameterView.FromDictionary(dictionary);
        var output = await htmlRenderer.RenderComponentAsync&amp;lt;Webpage&amp;gt;(parameters);

        return output.ToHtmlString();
    });
    
    File.WriteAllText(destination, html);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;Build the app.&lt;/p&gt;
&lt;p&gt;Navigate to the folder with your source files in&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nocco *.cs&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Open the newly created &lt;code&gt;docs&lt;/code&gt; folder and open any of the matching &lt;code&gt;*.html&lt;/code&gt; files.&lt;/p&gt;
&lt;h3 id="dependencies"&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;The original also used &lt;a href="https://www.nuget.org/packages/MarkdownSharp/1.13.0"&gt;MarkdownSharp&lt;/a&gt; &lt;em&gt;v1.13.0.0&lt;/em&gt;, I updated this to &lt;a href="https://www.nuget.org/packages/MarkdownSharpCore"&gt;MarkdownSharpCore&lt;/a&gt; &lt;em&gt;v1.2.0&lt;/em&gt; just to make the upgrade easier, I'm contemplating swapping to &lt;a href="https://www.nuget.org/packages/MarkDig"&gt;Markdig&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="code"&gt;&amp;lt;/&amp;gt; Code&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/nocco"&gt;https://github.com/AlexHedley/nocco&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/nocco-example"&gt;https://github.com/AlexHedley/nocco-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dontangg/nocco"&gt;https://github.com/dontangg/nocco&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://donwilson.net/nocco/"&gt;http://donwilson.net/nocco/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ashkenas.com/docco/"&gt;https://ashkenas.com/docco/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Nocco is a quick-and-dirty, literate-programming-style documentation generator</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/dotnet-tool-example</id>
		<title>.NET Tool Example</title>
		<author>
			<name>AlexHedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/dotnet-tool-example" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/dotNET/dotNET.png" />
		<updated>2025-05-11T00:00:00Z</updated>
		<content>&lt;!-- .NET Tool Example --&gt;
&lt;!-- ![.NET](images/dotNET/dotNET.png ".NET") --&gt;
&lt;p&gt;In this tutorial I will expand on the &lt;a href="https://learn.microsoft.com/en-gb/training/"&gt;Microsoft Learn&lt;/a&gt; tutorials site. They give a great starting point for the minimum settings you need but I'll add a couple more I've found useful. See the 🔗 links at the end if you want to run through them.&lt;/p&gt;
&lt;p&gt;Once you have created a new .NET exe, aka Console App, you can start updating the necessary config.&lt;/p&gt;
&lt;p&gt;On the &lt;code&gt;.csproj&lt;/code&gt; click &lt;kbd&gt;Alt&lt;/kbd&gt; + &lt;kbd&gt;Enter&lt;/kbd&gt; or &lt;em&gt;Right-Click&lt;/em&gt; &lt;strong&gt;Properties&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Scroll down to &lt;strong&gt;Package&lt;/strong&gt; and complete the properties you require.
This will update the underlying &lt;code&gt;.csproj&lt;/code&gt; or you could change them there directly but be careful as some only allow certain values.&lt;/p&gt;
&lt;p&gt;In the original Tutorial they suggest the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;PackAsTool&amp;gt;true&amp;lt;/PackAsTool&amp;gt;
&amp;lt;ToolCommandName&amp;gt;botsay&amp;lt;/ToolCommandName&amp;gt;
&amp;lt;PackageOutputPath&amp;gt;./nupkg&amp;lt;/PackageOutputPath&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which is the minium you need, but I like to add a few more i.e. the ones below, to add an icon, tags, description etc to make it easier for your consumers and yourself to know what the app does.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Generate NuGet package on build&lt;/td&gt;
&lt;td&gt;Produce a package file during build operations.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GeneratePackageOnBuild&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package ID&lt;/td&gt;
&lt;td&gt;The case-insensitive package identifier, which must be unique across nuget.org or whatever gallery the package resides in. IDs may not contain spaces or characters that are not valid for a URL, and generally follow .NET namespace rules.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageId&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Title&lt;/td&gt;
&lt;td&gt;A human-friendly title of the package, typically used in Ul displays as on nuget.org and the Package Manager in Visual Studio.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Title&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package Version&lt;/td&gt;
&lt;td&gt;The version of the package, following the major.minor.patch pattern. Version numbers may include a pre-release suffix.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Version&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Authors&lt;/td&gt;
&lt;td&gt;A comma-separated list of packages authors, matching the profile names on nuget.org. These are displayed in the NuGet Gallery on nuget.org and are used to cross-reference packages by the same authors.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Authors&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Company&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Company&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Product&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Product&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Description&lt;/td&gt;
&lt;td&gt;A description of the package for UI display.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Description&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Copyright&lt;/td&gt;
&lt;td&gt;Copyright details for the package.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Copyright&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Project URL&lt;/td&gt;
&lt;td&gt;A URL for the package's home page, often shown in UI displays as well as nuget.org.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageProjectUrl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Icon&lt;/td&gt;
&lt;td&gt;The icon image for the package. Image file size is limited to 1 MB. Supported file formats include JPEG and PNG. An image resolution of 128x128 is recommended.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageIcon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;README&lt;/td&gt;
&lt;td&gt;The README document for the package. Must be a Markdown (.md) file.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageIcon&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repository URL&lt;/td&gt;
&lt;td&gt;Specifies the URL for the repository where the source code for the package resides and/or from which it's being built. For linking to the project page, use the 'Project URL' field, instead.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RepositoryUrl&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Repository type&lt;/td&gt;
&lt;td&gt;Specifies the type of the repository. Default is 'git'.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;RepositoryType&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Tags&lt;/td&gt;
&lt;td&gt;A semicolon-delimited list of tags and keywords that describe the package and aid discoverability of packages through search and filtering.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageTags&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Release notes&lt;/td&gt;
&lt;td&gt;A description of the changes made in this release of the package, often used in UI like the Updates tab of the Visual Studio Package Manager in place of the package description.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageReleaseNotes&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pack as a .NET tool&lt;/td&gt;
&lt;td&gt;Packs this project as a special package that contains a console application that may be installed via the "dotnet tool" command.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackAsTool&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NET tool command name&lt;/td&gt;
&lt;td&gt;The command name via which the .NET tool will be invoked on the command line.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ToolCommandName&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Package Output Path&lt;/td&gt;
&lt;td&gt;Determines the output path in which the package will be dropped.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageOutputPath&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assembly neutral language&lt;/td&gt;
&lt;td&gt;(None)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;NeutralLanguage&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assembly version&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;AssemblyVersion&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;File version&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;FileVersion&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;License&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Package License&lt;/td&gt;
&lt;td&gt;Specify a license for the project's package.&lt;/td&gt;
&lt;td&gt;None&lt;br&gt;SPDX License Expression&lt;br&gt;Embedded File&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;License file&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageLicenseFile&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Require license acceptance&lt;/td&gt;
&lt;td&gt;Prompt the user to accept the license when installing this package&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageRequireLicenseAcceptance&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;License expression&lt;/td&gt;
&lt;td&gt;An SPDX license expression, often shown in UIs like nuget.org&lt;/td&gt;
&lt;td&gt;&lt;code&gt;PackageLicenseExpression&lt;/code&gt; &lt;a href="https://spdx.org/licenses/"&gt;link&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;Symbols&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Produce a symbol package&lt;/td&gt;
&lt;td&gt;Create an additional symbol package when the project is packed.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;IncludeSymbols&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol package format&lt;/td&gt;
&lt;td&gt;Specifies the format of the symbols package.&lt;/td&gt;
&lt;td&gt;&lt;code&gt;SymbolPackageFormat&lt;/code&gt; (symbols.nupkg/snupkg)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/dotNET/tool/nuget-package-properties-1.png" alt=".NET" title=".NET"&gt;
&lt;img src="https://alexhedley.github.io/blog/images/dotNET/tool/nuget-package-properties-2.png" alt=".NET" title=".NET"&gt;
&lt;img src="https://alexhedley.github.io/blog/images/dotNET/tool/nuget-package-properties-3.png" alt=".NET" title=".NET"&gt;&lt;/p&gt;
&lt;p&gt;This translates to the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-xml"&gt;&amp;lt;Project Sdk="Microsoft.NET.Sdk"&amp;gt;

  &amp;lt;PropertyGroup&amp;gt;
    &amp;lt;OutputType&amp;gt;Exe&amp;lt;/OutputType&amp;gt;
    &amp;lt;TargetFramework&amp;gt;net9.0&amp;lt;/TargetFramework&amp;gt;
    &amp;lt;ImplicitUsings&amp;gt;enable&amp;lt;/ImplicitUsings&amp;gt;
    &amp;lt;Nullable&amp;gt;enable&amp;lt;/Nullable&amp;gt;

    &amp;lt;!-- package properties --&amp;gt;
    &amp;lt;PackageId&amp;gt;alexhedley.botsay&amp;lt;/PackageId&amp;gt;
    &amp;lt;Version&amp;gt;1.0.0&amp;lt;/Version&amp;gt;
    &amp;lt;Authors&amp;gt;Alex Hedley&amp;lt;/Authors&amp;gt;
    &amp;lt;Company&amp;gt;Alex Hedley&amp;lt;/Company&amp;gt;
    &amp;lt;Product&amp;gt;Microsoft BotSay&amp;lt;/Product&amp;gt;

    &amp;lt;Title&amp;gt;Microsoft Bot Say&amp;lt;/Title&amp;gt;
    &amp;lt;PackageTags&amp;gt;Microsoft;Bot;Say&amp;lt;/PackageTags&amp;gt;
    &amp;lt;Description&amp;gt;This tool is a console application that takes a message as input and displays the message along with lines of text that create the image of a robot.&amp;lt;/Description&amp;gt;
    &amp;lt;PackageIcon&amp;gt;icon.png&amp;lt;/PackageIcon&amp;gt;
    &amp;lt;PackageReadmeFile&amp;gt;README.md&amp;lt;/PackageReadmeFile&amp;gt;
    &amp;lt;PackageRequireLicenseAcceptance&amp;gt;False&amp;lt;/PackageRequireLicenseAcceptance&amp;gt;
    &amp;lt;PackageLicenseFile&amp;gt;LICENSE&amp;lt;/PackageLicenseFile&amp;gt;
    &amp;lt;!-- &amp;lt;PackageLicenseExpression&amp;gt;MIT&amp;lt;/PackageLicenseExpression&amp;gt; --&amp;gt;
    &amp;lt;PackageReleaseNotes&amp;gt;Release Notes are the following...&amp;lt;/PackageReleaseNotes&amp;gt;
    &amp;lt;RepositoryType&amp;gt;git&amp;lt;/RepositoryType&amp;gt;
    &amp;lt;RepositoryUrl&amp;gt;https://github.com/AlexHedley/dotnet-tool-example&amp;lt;/RepositoryUrl&amp;gt;
    &amp;lt;PackageProjectUrl&amp;gt;https://github.com/AlexHedley/dotnet-tool-example&amp;lt;/PackageProjectUrl&amp;gt;
    &amp;lt;Copyright&amp;gt;© 2025&amp;lt;/Copyright&amp;gt;
    
    &amp;lt;!-- Tool settings --&amp;gt;
    &amp;lt;PackAsTool&amp;gt;true&amp;lt;/PackAsTool&amp;gt;
    &amp;lt;ToolCommandName&amp;gt;botsay&amp;lt;/ToolCommandName&amp;gt;
    &amp;lt;PackageOutputPath&amp;gt;./nupkg&amp;lt;/PackageOutputPath&amp;gt;
    &amp;lt;!-- &amp;lt;GeneratePackageOnBuild&amp;gt;true&amp;lt;/GeneratePackageOnBuild&amp;gt; --&amp;gt;
  &amp;lt;/PropertyGroup&amp;gt;

  &amp;lt;ItemGroup&amp;gt;
    &amp;lt;None Include="..\..\LICENSE" Pack="true" PackagePath="\" /&amp;gt;
    &amp;lt;None Include="images\icon.png" Pack="true" PackagePath="" /&amp;gt;
    &amp;lt;None Include="..\assets\README.md" Pack="true" PackagePath="" /&amp;gt;
  &amp;lt;/ItemGroup&amp;gt;

&amp;lt;/Project&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Build the app then open the &lt;code&gt;.nupkg&lt;/code&gt; it in the &lt;strong&gt;NuGet Package Explorer&lt;/strong&gt; to confirm if your properties have been set correctly.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/dotNET/tool/NuGet_Package_Explorer.png" alt="NuGet Package Explorer" title="NuGet Package Explorer"&gt;&lt;/p&gt;
&lt;p&gt;If you don't have the app installed you can find it on GitHub or the Microsoft Store.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer"&gt;https://github.com/NuGetPackageExplorer/NuGetPackageExplorer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://apps.microsoft.com/detail/9wzdncrdmdm3"&gt;https://apps.microsoft.com/detail/9wzdncrdmdm3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="code"&gt;&amp;lt;/&amp;gt; Code&lt;/h2&gt;
&lt;p&gt;You can download the example I built on &lt;em&gt;GitHub&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/dotnet-tool-example"&gt;https://github.com/AlexHedley/dotnet-tool-example&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Release: &lt;a href="https://github.com/AlexHedley/dotnet-tool-example/releases/tag/1.0.0"&gt;https://github.com/AlexHedley/dotnet-tool-example/releases/tag/1.0.0&lt;/a&gt;&lt;br&gt;
GitHub nuget: &lt;a href="https://github.com/AlexHedley/dotnet-tool-example/pkgs/nuget/alexhedley.botsay"&gt;https://github.com/AlexHedley/dotnet-tool-example/pkgs/nuget/alexhedley.botsay&lt;/a&gt;&lt;br&gt;
nuget: &lt;a href="https://www.nuget.org/packages/alexhedley.botsay/"&gt;https://www.nuget.org/packages/alexhedley.botsay/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Tutorial: Create a .NET tool using the .NET CLI
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-create"&gt;https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-create&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tutorial: Install and use a .NET global tool using the .NET CLI
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-use"&gt;https://learn.microsoft.com/en-us/dotnet/core/tools/global-tools-how-to-use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tutorial: Install and use a .NET local tool using the .NET CLI
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://learn.microsoft.com/en-us/dotnet/core/tools/local-tools-how-to-use"&gt;https://learn.microsoft.com/en-us/dotnet/core/tools/local-tools-how-to-use&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Create a .NET tool using the .NET CLI</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/dotnet-newcastle-april-2025</id>
		<title>.NET Meetup Newcastle - April 2025</title>
		<author>
			<name>alexhedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/dotnet-newcastle-april-2025" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/meetups/dotnet-april-2025.png" />
		<updated>2025-04-29T00:00:00Z</updated>
		<content>&lt;!-- # Qudos DotNet Newcastle Meetup - May 2024 --&gt;
&lt;p&gt;📅 Tuesday, April 29, 2025 · 5:30 - 8pm GMT&lt;/p&gt;
&lt;p&gt;📍 Haylofts, 5 St. Thomas Street, Newcastle, NE1 4LE.&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://www.meetup.com/dotnetmeetupnorth/events/307169799/"&gt;https://www.meetup.com/dotnetmeetupnorth/events/307169799/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="talks"&gt;Talks&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Speaker 1&lt;/strong&gt;: John Staveley&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Creating an AI assistant to help run meetups&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;In this session I will explain how I created a cheeky virtual assistant called JaaS to aid in the running of several meetups that I organise.
How I was able to interact it with it using Azure Speech to Text and Azure Text to Speech.
How I gave it almost limitless knowledge by incorporating ChatGPT using the Azure OpenAI service.
And... how once created, it did not put anyone out of a job or take over the world!&lt;/p&gt;
&lt;p&gt;&lt;em&gt;📼 Video&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;TBA&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speaker Bio&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;John Staveley, Microsoft MVP, Organiser at LeedsSharp, IotNorth and Data Science meetup&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;Speaker 2&lt;/strong&gt;: Peter Shaw&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Title&lt;/strong&gt;: Using Postgres SQL With .NET&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;You can use Entity Framework, and get access to Postgres just like you can with every other database system on the planet, but what if I told you that Postgres goes way, way beyond anything you can do with entity framework. What most folks DON'T know is that Postgres touts itself as a &amp;quot;Data Application Framework&amp;quot; and with the latest version of NPG-SQL (The official Postgres driver for dotnet) you can now get access to much of this extra goodness, stick with me while I try to cram as much as I can show you in about an hour, that you probably never realised Postgres could do.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;📼 Video&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;TBA&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Speaker Bio&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;Peter Shaw - I have been a dev for 30 or more years now.&lt;/p&gt;
&lt;p&gt;I wrote my first bit of code in may 1979 at the age of 7, by the time I was 10 I was programming chip level in machine code on the Z80 &amp;amp; 6502 CPU's, moving into my teenage years I was programming Arm cpu's before anyone knew what they where.&lt;/p&gt;
&lt;p&gt;I don't really sell myself, I'm a dev after all not a marketer, but there's not many areas of I.T. I've not worked in, from hardware to software, support to management.&lt;/p&gt;
&lt;p&gt;These days I'm best known for my activities in the .NET &amp;amp; MS Dev scene here in the UK, My blog posts frequently appear on other outlets as well as my own blog, and if you've got the time to sit and listen to what I have to say, I've certainly got the time to tell you.&lt;/p&gt;
&lt;p&gt;I'm a veteran of the &amp;quot;Developer Developer Developer&amp;quot; series of live developer events here in the UK, and one of the main figures behind &amp;quot;LiDNUG&amp;quot; (&lt;a href="http://lidnug.org/"&gt;http://lidnug.org&lt;/a&gt;) on the linked in network.&lt;/p&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;p&gt;We’re back at Haylofts for our 2nd .NET meetup of the year! 5 St. Thomas Street, Newcastle, NE1 4LE.&lt;/p&gt;
&lt;p&gt;We have a fairly relaxed agenda, but will follow:&lt;/p&gt;
&lt;p&gt;5:30 - Doors Open&lt;br /&gt;
5:45 - Pizza arrival&lt;br /&gt;
6:00 - Introduction / Housekeeping&lt;br /&gt;
6:10 - Talks begin&lt;br /&gt;
8:00 - Closing&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/&amp;#64;QudosRecruitment"&gt;https://www.youtube.com/&amp;#64;QudosRecruitment&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dotnetmeetupnorth/"&gt;https://www.meetup.com/dotnetmeetupnorth/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/dotnetmeetupnorth/events/307169799/"&gt;https://www.meetup.com/dotnetmeetupnorth/events/307169799/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>.NET meetup</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/govuk-design-system-feb2025</id>
		<title>Design System Chat - February 2025</title>
		<author>
			<name>alex-hedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/govuk-design-system-feb2025" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/govuk/govuk-design-system-feb.png" />
		<updated>2025-02-26T00:00:00Z</updated>
		<content>&lt;!-- # Design System Chat - February 2025 --&gt;
&lt;h2 id="event"&gt;Event&lt;/h2&gt;
&lt;p&gt;🗓️ Wednesday, 26 February
🕰️ 11:00 - 12:00 BST&lt;br /&gt;
📍 Online&lt;br /&gt;
🔗 &lt;a href="https://www.eventbrite.co.uk/e/design-system-chat-february-2025-tickets-1255768008919"&gt;https://www.eventbrite.co.uk/e/design-system-chat-february-2025-tickets-1255768008919&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;p&gt;You're invited to 2025's second 'design system chat', hosted monthly by the GOV.UK Design System team.&lt;/p&gt;
&lt;h3 id="agenda"&gt;Agenda&lt;/h3&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Essential component criteria&lt;/li&gt;
&lt;li&gt;FrontEnd installation session&lt;/li&gt;
&lt;li&gt;File upload&lt;/li&gt;
&lt;li&gt;Lean Coffee: Bring your discussion topics and questions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Session type&lt;/strong&gt;: Show &amp;amp; tell, discussion&lt;br /&gt;
&lt;strong&gt;Duration&lt;/strong&gt;: 1 hour&lt;br /&gt;
&lt;strong&gt;Platform&lt;/strong&gt;: Zoom (please make sure your device can access Zoom meetings)&lt;br /&gt;
If you sign up, please make sure you can attend the whole session, as we sell out quite quickly.
We will be using &lt;strong&gt;Zoom Meetings&lt;/strong&gt; for video, and &lt;strong&gt;Padlet&lt;/strong&gt; for notes and comments. Please make sure you have a device that can access these, as some organisation’s firewalls block these platforms.&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://design-system.service.gov.uk/"&gt;https://design-system.service.gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/&amp;#64;GovernmentDigitalService"&gt;https://www.youtube.com/&amp;#64;GovernmentDigitalService&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/&amp;#64;UKGovDesign"&gt;https://www.youtube.com/&amp;#64;UKGovDesign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>GOV.UK Design System team</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/aws-north-east-user-group-feb-2025</id>
		<title>AWS User Group - North East - Meetup - Feb 2025</title>
		<author>
			<name>alex-hedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/aws-north-east-user-group-feb-2025" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/meetups/aws-north-east-user-group/banner.png" />
		<updated>2025-02-12T00:00:00Z</updated>
		<content>&lt;!-- # AWS User Group - North East - Meetup - Feb 2025 --&gt;
&lt;p&gt;AWS Community re:Invent re:Cap&lt;/p&gt;
&lt;p&gt;📅 Wednesday, Feb 12, 2025 · 6pm - 8pm GMT&lt;/p&gt;
&lt;p&gt;📍 The Core, Bath Lane, Newcastle Helix, Newcastle upon Tyne, NE4 5TF&lt;/p&gt;
&lt;p&gt;🔗 &lt;a href="https://www.meetup.com/aws-user-group-north-east-england/events/305592946/"&gt;https://www.meetup.com/aws-user-group-north-east-england/events/305592946/&lt;/a&gt;&lt;/p&gt;
&lt;!-- ![Banner](images/meetups/aws-north-east-user-group/banner.png "Banner") --&gt;
&lt;h2 id="agenda"&gt;Agenda&lt;/h2&gt;
&lt;p&gt;Hi everyone&lt;/p&gt;
&lt;p&gt;Welcome to our first scheduled event of the new year.&lt;/p&gt;
&lt;p&gt;The tour has already kicked off and with almost 20 venues in the UK over the next couple of months &lt;strong&gt;Matheus Guimaraes&lt;/strong&gt; will be hosting the re:Invent Recap.&lt;/p&gt;
&lt;p&gt;If you've missed it completely, or went and still missed things (entirely possibly, its huge!), or want a recap of all the major announcements then come and join us.&lt;/p&gt;
&lt;p&gt;Matheus is an entertaining speaker and you'll definitely have a good night.&lt;/p&gt;
&lt;p&gt;There will be our usual pizza and drinks provided by our wonderful hosts &lt;strong&gt;Leighton&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Date: Wednesday February 12&lt;br /&gt;
Time: 18:00-20:00&lt;br /&gt;
Venue: The Core, Bath Lane, Newcastle Helix, Newcastle upon Tyne, NE4 5TF&lt;/p&gt;
&lt;p&gt;Many thanks to our sponsors &lt;strong&gt;Leighton&lt;/strong&gt; for hosting us on the night.&lt;/p&gt;
&lt;p&gt;Hope to see you all there!&lt;/p&gt;
&lt;h2 id="notes"&gt;Notes&lt;/h2&gt;
&lt;p&gt;Matheus was a superb presenter, really engaging and loved the enthusiasm for all things AWS!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://linktr.ee/codingmatheus"&gt;https://linktr.ee/codingmatheus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.meetup.com/aws-user-group-north-east-england/"&gt;https://www.meetup.com/aws-user-group-north-east-england/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/developer/community/usergroups/"&gt;https://aws.amazon.com/developer/community/usergroups/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A few links I remembered to scan during&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/announcing-a-visual-update-to-the-aws-management-console-preview/"&gt;Announcing a visual update to the AWS Management Console (preview)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/use-your-on-premises-infrastructure-in-amazon-eks-clusters-with-amazon-eks-hybrid-nodes/"&gt;Use your on-premises infrastructure in Amazon EKS clusters with Amazon EKS Hybrid Nodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/blogs/aws/new-aws-security-incident-response-helps-organizations-respond-to-and-recover-from-security-events/"&gt;New AWS Security Incident Response helps organizations respond to and recover from security events&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Download the PDF to see the full presentation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://community.aws/recaps"&gt;AWS Community re:Invent re:Caps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>AWS meetup</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/copper-rose-workshop</id>
		<title>Copper Rose Workshop</title>
		<author>
			<name>AlexHedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/copper-rose-workshop" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/images/banner.png" />
		<updated>2025-02-01T00:00:00Z</updated>
		<content>&lt;!-- Copper Rose Workshop --&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/crafting/copper/marketing.jpg" alt="Marketing" title="Marketing"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://facebook.com/events/s/copper-rose-workshop/2753565598184924/"&gt;https://facebook.com/events/s/copper-rose-workshop/2753565598184924/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;True North Trades are back - this time they're working with copper to create beautiful roses, ideal as a Valentine's or Mother's Day gift.  The workshop would also make a great gift too.&lt;/p&gt;
&lt;p&gt;'True North Trades' consists of a Blacksmith, Furniture Maker/Woodworker and a General Handyman, they specialise in a range of products, building talents and activities.&lt;/p&gt;
&lt;p&gt;We're really pleased that they will be joining us at the Heritage Centre to run more of their metalworking workshops.&lt;/p&gt;
&lt;p&gt;In this workshop you will be taught how to cut out your blanks with tin snips so a degree of strength in the hand will be needed.  You will learn how to shape and solder your blanks into a beautiful copper rose that can be taken away and admired forever.
So why not treat yourself to this great workshop - learning a new skill and taking away something special that you have hand-made yourself.&lt;/p&gt;
&lt;p&gt;Come along with a friend, or maybe buy the workshop experience as a unique gift for someone special.
Tickets £40 including all materials. Limited places and booking essential.&lt;/p&gt;
&lt;p&gt;These workshops booked up quickly last time, so please reserve your place as soon as possible to avoid missing out.
For adults and older children (aged 14+) and must be able to have a degree of strength to cut out the blanks.
Under 16s must be accompanied by an adult).&lt;/p&gt;
&lt;p&gt;WWW.LANDOFOAKANDIRON.SHOP&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/crafting/copper/finished.jpg" alt="Finished" title="Finished"&gt;&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://truenorthtrades.co.uk/"&gt;https://truenorthtrades.co.uk/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://landofoakandiron.org.uk/"&gt;https://landofoakandiron.org.uk/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/crafting/copper/marketing.jpg" alt="Marketing" title="Marketing"&gt;&lt;/p&gt;</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/govuk-design-system-jan2025</id>
		<title>Design System Chat - Jan 2025</title>
		<author>
			<name>alex-hedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/govuk-design-system-jan2025" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/posts/images/govuk/govuk-design-system-jan.jpeg" />
		<updated>2025-01-29T00:00:00Z</updated>
		<content>&lt;!-- # Design System Chat - Jan 2025 --&gt;
&lt;h2 id="event"&gt;Event&lt;/h2&gt;
&lt;p&gt;🗓️ Wednesday, 29 January
🕰️ 11:00 - 12:00 BST&lt;br /&gt;
📍 Online&lt;br /&gt;
🔗 &lt;a href="https://www.eventbrite.co.uk/e/design-system-chat-january-2025-tickets-1214931235029"&gt;https://www.eventbrite.co.uk/e/design-system-chat-january-2025-tickets-1214931235029&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="details"&gt;Details&lt;/h2&gt;
&lt;p&gt;You're invited to 2025's first 'design system chat', hosted monthly by the GOV.UK Design System team.&lt;/p&gt;
&lt;h3 id="agenda"&gt;Agenda&lt;/h3&gt;
&lt;p&gt;Agenda:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Annual UX/FrontEnd survey - what we do with the data and how it feeds into prioritisation&lt;/li&gt;
&lt;li&gt;WCAG 2.2 video&lt;/li&gt;
&lt;li&gt;Connecting gov design systems hackathon - What happened and plans for part 2&lt;/li&gt;
&lt;li&gt;JavaScript API - what we shipped recently&lt;/li&gt;
&lt;li&gt;Discussion: What are you leaving behind in 2024?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Session type&lt;/strong&gt;: Show &amp;amp; tell, discussion&lt;br /&gt;
&lt;strong&gt;Duration&lt;/strong&gt;: 1 hour&lt;br /&gt;
&lt;strong&gt;Platform&lt;/strong&gt;: Zoom (please make sure your device can access Zoom meetings)&lt;br /&gt;
If you sign up, please make sure you can attend the whole session, as we sell out quite quickly.
We will be using &lt;strong&gt;Zoom Meetings&lt;/strong&gt; for video, and &lt;strong&gt;Padlet&lt;/strong&gt; for notes and comments. Please make sure you have a device that can access these, as some organisation’s firewalls block these platforms.&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://design-system.service.gov.uk/"&gt;https://design-system.service.gov.uk&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/&amp;#64;GovernmentDigitalService"&gt;https://www.youtube.com/&amp;#64;GovernmentDigitalService&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/&amp;#64;UKGovDesign"&gt;https://www.youtube.com/&amp;#64;UKGovDesign&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>GOV.UK Design System team</summary>
	</entry>
	<entry>
		<id>https://alexhedley.github.io/blog/posts/blashing-blazingstory</id>
		<title>Blashing - Blazing Story</title>
		<author>
			<name>alexhedley</name>
		</author>
		<link href="https://alexhedley.github.io/blog/posts/blashing-blazingstory" />
		<link rel="enclosure" type="image" href="https://alexhedley.github.io/blog/images/banner.png" />
		<updated>2025-01-25T00:00:00Z</updated>
		<content>&lt;!-- # Blashing - Blazing Story --&gt;
&lt;p&gt;Having found &lt;a href="https://alexhedley.github.io/blog/blazingstory"&gt;Blazing Story&lt;/a&gt; I had to try it out with some of my own Blazor Components. I thought why not use &lt;a href="https://alexhedley.github.io/blog/the-beginning-of-blashing"&gt;Blashing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I followed the thorough steps in their readme and got to creating the required &lt;code&gt;stories.razor&lt;/code&gt; files. Added the required arguments and ran the app:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/blashing/blashing-blazorstory.png" alt="Example" title="Example"&gt;&lt;/p&gt;
&lt;p&gt;There's a few errors thrown when clicking on the different examples which I need to look into but it's just the beginning.&lt;/p&gt;
&lt;p&gt;Such a well made project :).&lt;/p&gt;
&lt;h2 id="links"&gt;🔗 Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;branch: &lt;a href="https://github.com/AlexHedley/blashing/tree/blazingstories"&gt;https://github.com/AlexHedley/blashing/tree/blazingstories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PR: &lt;a href="https://github.com/AlexHedley/blashing/pull/162"&gt;https://github.com/AlexHedley/blashing/pull/162&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;code: &lt;a href="https://github.com/AlexHedley/blashing"&gt;https://github.com/AlexHedley/blashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="related"&gt;Related&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexhedley.github.io/blog/blazingstory"&gt;Blazing Story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://alexhedley.github.io/blog/the-beginning-of-blashing"&gt;The Beginning of Blashing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
		<summary>Adding Blazing Story to Blashing</summary>
	</entry>
</feed>