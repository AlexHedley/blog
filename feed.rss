<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://alexhedley.github.io/blog</link>
		<description />
		<copyright>Copyright © 2023</copyright>
		<pubDate>Fri, 26 May 2023 12:45:57 GMT</pubDate>
		<lastBuildDate>Fri, 26 May 2023 12:45:57 GMT</lastBuildDate>
		<item>
			<title>GitHub Actions Branches</title>
			<link>https://alexhedley.github.io/blog/posts/github-actions-branches</link>
			<author>alex-hedley</author>
			<guid>https://alexhedley.github.io/blog/posts/github-actions-branches</guid>
			<pubDate>Fri, 24 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;How to get a list of branches from a current repo.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://github.com/actions/github-script"&gt;actions/github-script&lt;/a&gt; is a good place to start as it has access to the Repo info.
To see what you can get run the script and output the complete context:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;      - name: View context attributes
        uses: actions/github-script&amp;#64;v5
        with:
          script: console.log(context)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Be careful though, as when this is ran manually it gets different values to when ran on a schedule.&lt;/p&gt;
&lt;p&gt;Looking at the &lt;em&gt;Repository&lt;/em&gt; info the &lt;code&gt;branches_url&lt;/code&gt; might be useful:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;Context {
  payload: {
    repository: {
      branches_url: 'https://api.github.com/repos/alex-hedley/[REPONAME]/branches{/branch}',
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context.payload.repository.branches_url&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We don't need the &lt;code&gt;{{/branch}}&lt;/code&gt; though. So lets remove that.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const branches_url = context.payload.repository.branches_url
const branches_url_new = branches_url.replace(&amp;quot;{/branch}&amp;quot;, &amp;quot;&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With this &lt;em&gt;url&lt;/em&gt; we can now get the data using the &lt;a href="https://github.com/actions/github-script#download-data-from-a-url"&gt;github.request()&lt;/a&gt; method.
Map just the names of the branches to an Array.
And log the data.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-js"&gt;const result = await github.request(branches_url_new)
const names = result.data.map(branch =&amp;gt; branch.name)
console.log(names)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;{
    ...
    data: [
        { name: 'dev', commit: [Object], protected: false },
        { name: 'main', commit: [Object], protected: false }
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;[ 'dev', 'main' ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on the type of event you could&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;on:
  push:
    branches:    
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - '!master'   # excludes master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But this isn't available for &lt;code&gt;workflow_dispatch:&lt;/code&gt; as of yet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: Get Branches

on:
  workflow_dispatch:
    
jobs:
  print-context:
    runs-on: ubuntu-latest
    outputs:
      branches: ${{ steps.branch-output.outputs.branches }}
    steps:
      - name: Branches
        id: branches-list
        uses: actions/github-script&amp;#64;v5
        with:
          script: |
            const branches_url = context.payload.repository.branches_url
            const branches_url_new = branches_url.replace(&amp;quot;{/branch}&amp;quot;, &amp;quot;&amp;quot;)
            const result = await github.request(branches_url_new)
            const names = result.data.map(branch =&amp;gt; branch.name)
            
            const index = names.indexOf('main');
            if (index &amp;gt; -1) {
              names.splice(index, 1);
            }
            console.log(names)

            return names
      
      - name: Branches
        id: branch-output
        run: |
          BRANCHES='${{ steps.branches-list.outputs.result }}'
          echo ::set-output name=branches::$BRANCHES
      
  my_matrix:
    runs-on: ubuntu-latest
    needs:
      - print-context
    strategy:
      matrix:
        branches: ${{ fromJSON(needs.print-context.outputs.branches) }}
    steps:
      - name: Branches
        run: |
          echo ${{ matrix.branches }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="links"&gt;Links&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://thekevinwang.com/2021/09/19/github-actions-dynamic-matrix/"&gt;Dynamic Matrices in GitHub Actions&lt;/a&gt; by &lt;a href="https://thekevinwang.com/me/"&gt;Kevin Wang&lt;/a&gt; - September 19, 2021&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>GitHub Actions Request</title>
			<link>https://alexhedley.github.io/blog/posts/github-actions-request</link>
			<author>alex-hedley</author>
			<guid>https://alexhedley.github.io/blog/posts/github-actions-request</guid>
			<pubDate>Fri, 24 Dec 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The &lt;a href="https://github.com/actions/github-script"&gt;actions/github-script&lt;/a&gt; has an option to send a request, that is already authenticated with the GitHub API.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;const diff_url = context.payload.pull_request.diff_url&lt;/code&gt;
&lt;code&gt;const result = await github.request(diff_url)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/actions/github-script#download-data-from-a-url"&gt;Download data from a URL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>GitHub Actions Comment</title>
			<link>https://alexhedley.github.io/blog/posts/github-actions-comment</link>
			<author>alex-hedley</author>
			<guid>https://alexhedley.github.io/blog/posts/github-actions-comment</guid>
			<pubDate>Fri, 12 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Have you ever needed to add a comment to your PR after your Jobs(s) have completed?&lt;/p&gt;
&lt;p&gt;Scrolling through the logs can be long winded, why not add a nice comment?&lt;/p&gt;
&lt;p&gt;Want to add some some cool emojis too?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://github.com/ikatyang/emoji-cheat-sheet/blob/master/README.md"&gt;emoji-cheat-sheet&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;code&gt;:link:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;📘 &lt;code&gt;:blue_book:&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Start with the &lt;a href="https://github.com/actions/github-script"&gt;actions/github-script&lt;/a&gt; action.&lt;/p&gt;
&lt;p&gt;It has various features, one of which is to &lt;code&gt;createComment&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add the various inputs you need to configure:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;github.issues.createComment({})&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;body&lt;/code&gt; is the piece you want to update with your info&lt;/p&gt;
&lt;p&gt;&lt;code&gt;body: ':link: MY LINK'&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;With an output of&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;🔗 MY LINK&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Then you can set your trigger to run on a &lt;em&gt;PR&lt;/em&gt; and it'll add the necessary info.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://alexhedley.github.io/blog/images/gh/github-actions-comment.png" alt="Actions Comment" title="Actions Comment"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="workflow"&gt;Workflow&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: Add Comment

on:
  # workflow_dispatch:
  pull_request:
    branches: [main]

jobs:
  PR-Comment:
    runs-on: ubuntu-latest
    steps:
      - name: PR Comment
        if: github.base_ref == 'main'
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.issues.createComment({
              issue_number: ${{ github.event.number }},
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: ':link: MY LINK'
            })
&lt;/code&gt;&lt;/pre&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Welcome</title>
			<link>https://alexhedley.github.io/blog/posts/welcome3</link>
			<author>alex-hedley</author>
			<guid>https://alexhedley.github.io/blog/posts/welcome3</guid>
			<pubDate>Mon, 01 Nov 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Welcome to my new Blog!&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Convert heic</title>
			<link>https://alexhedley.github.io/blog/posts/convert-heic</link>
			<description>&lt;p&gt;Got an image from you iPhone?&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/convert-heic</guid>
			<pubDate>Fri, 20 Aug 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Got an image from you iPhone?&lt;/p&gt;
&lt;p&gt;Saved as &lt;code&gt;.heic&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Download &lt;a href="https://imagemagick.org/"&gt;ImageMagick&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Then run &lt;code&gt;magick rose.jpg rose.png&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://imagemagick.org/script/convert.php"&gt;Convert Between Image Formats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Markdown to PDF via GitHub Actions and Pandoc</title>
			<link>https://alexhedley.github.io/blog/posts/md-to-pdf</link>
			<description>&lt;p&gt;In this post I'll run through converting a &lt;code&gt;md&lt;/code&gt; file to a PDF using &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt; and &lt;a href="https://github.com/actions/"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/md-to-pdf</guid>
			<pubDate>Sat, 20 Feb 2021 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In this post I'll run through converting a &lt;code&gt;md&lt;/code&gt; file to a PDF using &lt;a href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt; and &lt;a href="https://github.com/actions/"&gt;GitHub Actions&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you need to convert files from one markup format into another, pandoc is your swiss-army knife. Pandoc can convert between the following formats:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is useful if you're writing up documentation and want to output to different file formats.&lt;/p&gt;
&lt;p&gt;I found a useful &lt;a href="https://github.com/pandoc/pandoc-action-example"&gt;example&lt;/a&gt; on a GitHub &lt;a href="https://github.com/pandoc"&gt;profile&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Create a new file called &lt;code&gt;book.md&lt;/code&gt; and a folder called &lt;code&gt;images&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Add you content.&lt;/p&gt;
&lt;p&gt;Create a GitHub workflow:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: Create PDF

on: push

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout&amp;#64;v2
      - run: |
          mkdir output  # create output dir
          # this will also include README.md
          echo &amp;quot;FILELIST=$(printf '&amp;quot;%s&amp;quot; ' *.md)&amp;quot; &amp;gt;&amp;gt; $GITHUB_ENV
      - uses: docker://pandoc/latex:2.9
        with:
          args: --output=output/result.pdf ${ env.FILELIST }
      - uses: actions/upload-artifact&amp;#64;v2
        with:
          name: output
          path: output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;code&gt;${ var }&lt;/code&gt; needs double &lt;code&gt;{&lt;/code&gt; &lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As well as creating an &lt;a href="https://github.com/actions/upload-artifact"&gt;artifact&lt;/a&gt; you could also &lt;a href="https://github.com/actions/create-release"&gt;create&lt;/a&gt; a release and &lt;a href="https://github.com/actions/upload-release-asset"&gt;upload&lt;/a&gt; that.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: Create PDF

on: push

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout&amp;#64;v2
      - run: |
          mkdir output # create output dir
          # this will also include README.md
          echo &amp;quot;FILELIST=$(printf '&amp;quot;%s&amp;quot; ' *.md)&amp;quot; &amp;gt;&amp;gt; $GITHUB_ENV
      - uses: docker://pandoc/latex:2.9
        with:
          args: --output=output/result.pdf ${ env.FILELIST }
      - uses: actions/upload-artifact&amp;#64;v2
        with:
          name: output
          path: output
      
      - name: Create Release
        id: create_release
        uses: actions/create-release&amp;#64;v1
        env:
          GITHUB_TOKEN: ${ secrets.GITHUB_TOKEN }
        with:
          tag_name: v0.1 #${ github.ref }
          release_name: Release v0.1 #${ github.ref }
          draft: true
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset&amp;#64;v1
        env:
          GITHUB_TOKEN: ${ secrets.GITHUB_TOKEN }
        with:
          upload_url: ${ steps.create_release.outputs.upload_url }
          asset_path: output/result.pdf
          asset_name: Handbook.pdf
          asset_content_type: application/pdf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: &lt;code&gt;${ var }&lt;/code&gt; needs double &lt;code&gt;{&lt;/code&gt; &lt;code&gt;}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Note: There is a problem with the &lt;code&gt;set-env&lt;/code&gt; &lt;a href="https://github.com/pandoc/pandoc-action-example/issues/12"&gt;Issue&lt;/a&gt; and &lt;a href="https://github.com/pandoc/pandoc-action-example/pull/14"&gt;PR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One workaround is:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;      - run: |
          echo &amp;quot;::set-env name=FILELIST::$(printf '&amp;quot;%s&amp;quot; ' *.md)&amp;quot;
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id="html"&gt;HTML&lt;/h2&gt;
&lt;p&gt;You might also want to create it as HTML:&lt;/p&gt;
&lt;p&gt;Sample:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: Create HTML

on: push

jobs:
  convert_via_pandoc:
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout&amp;#64;v2
        
      - name: Create output directory
        run: |
          mkdir output  # create output dir
          echo &amp;quot;FILELIST=book.md&amp;quot; &amp;gt;&amp;gt; $GITHUB_ENV
      
      - name: Pandoc
        uses: docker://pandoc/latex:2.9
        with:
          args: --output=output/index.html ${{ env.FILELIST }} -s
      
      # copy the images from the repo to the output folder for inclusion in the artifact
      - name: Copy images dir to output dir
        run: cp -r images/ output/
      
      - name: Upload Artifact
        uses: actions/upload-artifact&amp;#64;v2
        with:
          name: Handbook
          path: output
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another option would be to add an extra arg (&lt;a href="https://pandoc.org/MANUAL.html#option--extract-media"&gt;&lt;code&gt;--extract-media&lt;/code&gt;&lt;/a&gt;)  which takes a DIRECTORY: &lt;code&gt;--extract-media=DIR&lt;/code&gt;, just set the folder to &lt;strong&gt;images&lt;/strong&gt;: &lt;code&gt;--extract-media=images&lt;/code&gt; and you will get the necessary files.&lt;/p&gt;
&lt;p&gt;The file names do become random strings.&lt;/p&gt;
&lt;p&gt;But then the path doesn't work with the HTML.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Utility Blazor</title>
			<link>https://alexhedley.github.io/blog/posts/utility-blazor</link>
			<description>&lt;p&gt;To add to my increasing collection of Utility apps I've decided to produce a &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor"&gt;Blazor&lt;/a&gt; version.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/utility-blazor</guid>
			<pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;To add to my increasing collection of Utility apps I've decided to produce a &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor"&gt;Blazor&lt;/a&gt; version.&lt;/p&gt;
&lt;p&gt;I love the idea of writing the web app in C#, with minimal js, and being able to host it anywhere.&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps look like a nice option too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-ca/azure/static-web-apps/deploy-blazor"&gt;Tutorial: Building a static web app with Blazor in Azure Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hanselman.com/blog/BlazorWebAssemblyonAzureStaticWebApps.aspx"&gt;Blazor WebAssembly on Azure Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial site has been configured and is deploying:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexhedley.github.io/Utility-Blazor/"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/Utility-Blazor"&gt;Utility-Blazor Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm looking forward to trying out &lt;a href="https://github.com/egil/bUnit"&gt;bUnit&lt;/a&gt; for Unit Testing.&lt;/p&gt;
&lt;p&gt;I found a GitHub Action to deploy it to GitHub Pages, just a couple of tasks to modify the ouptut so it runs correctly.&lt;/p&gt;
&lt;p&gt;Much like an AngularJS app you need to set the base href so the app loads properly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: Change base-tag in index.html from / to blazor-test
  run: sed -i 's/&amp;lt;base href=&amp;quot;\/&amp;quot; \/&amp;gt;/&amp;lt;base href=&amp;quot;\/blazor-test\/&amp;quot; \/&amp;gt;/g' release/wwwroot/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To help with routing make the &lt;em&gt;404&lt;/em&gt; the same as the &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: copy index.html to 404.html
  run: cp release/wwwroot/index.html release/wwwroot/404.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As GHP uses jekyll add the following file so it doesnt use those settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: Add .nojekyll file
  run: touch release/wwwroot/.nojekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I just need to port the original feature set to this application.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/Swimburger"&gt;&amp;#64;Swimburger&lt;/a&gt; for the GitHub Action for deploying the app to GitHub Pages&lt;/p&gt;
&lt;p&gt;How to deploy ASP.NET Blazor WebAssembly to GitHub Pages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages"&gt;https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BlazorGitHubPagesDemo (&lt;a href="https://github.com/Swimburger/BlazorGitHubPagesDemo"&gt;https://github.com/Swimburger/BlazorGitHubPagesDemo&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Jeff Goldblum StreamDeck Action</title>
			<link>https://alexhedley.github.io/blog/posts/jeffgoldblum</link>
			<description>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/StreamDeckToolkit"&gt;post&lt;/a&gt; I discussed the &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;StreamDeck&lt;/a&gt; and adding docs to the .NET toolkit.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/jeffgoldblum</guid>
			<pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/StreamDeckToolkit"&gt;post&lt;/a&gt; I discussed the &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;StreamDeck&lt;/a&gt; and adding docs to the .NET toolkit.&lt;/p&gt;
&lt;p&gt;Whilst watching a stream from &lt;a href="https://www.twitch.tv/jamesmontemagno/"&gt;JM&lt;/a&gt; Aden &lt;a href="https://github.com/jamesmontemagno/MyStreamTimer/issues/36"&gt;suggested&lt;/a&gt; he add a StreamDeck Plugin to &lt;a href="https://www.mystreamtimer.com/"&gt;MyStreamTimer&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream Deck Extension for My Stream Timer | C# | @JamesMontemagno
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/744833142"&gt;https://www.twitch.tv/videos/744833142&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO: Add YouTube link since Twitch expires.&lt;/p&gt;
&lt;p&gt;A couple of weeks later James did a stream for a presentation he was preparing for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparing a Presentation! #OBS #StreamDeck #PowerPoint | @JamesMontemagno
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/758464643"&gt;https://www.twitch.tv/videos/758464643&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A project &lt;a href="https://github.com/jamesmontemagno/streamdeck-treecount/"&gt;Tree Count&lt;/a&gt; was created for this.&lt;/p&gt;
&lt;p&gt;Roll forward a couple of hours and &lt;a href="https://twitter.com/mkristensen"&gt;Mads&lt;/a&gt; is on stream, with James producing: &lt;a href="https://www.youtube.com/watch?v=y_nTdXzterM&amp;amp;list=PLReL099Y5nRdG2n1PrY_tbCsUznoYvqkS"&gt;Writing Visual Studio Extensions with Mads - Controlling the clipboard&lt;/a&gt; and he needed some lorem ipsum text. Of course there's only one place you should get filler text and this is &lt;a href="https://jeffsum.com/"&gt;Jeffsum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This gave me a thought! Why not create an OBS/StreamDeck plugin using &lt;a href="https://github.com/jamesmontemagno/Jeffsum.NET"&gt;Jeffsum.NET&lt;/a&gt; to grab JG quotes.&lt;/p&gt;
&lt;p&gt;![Stream Deck Jeff Goldblum]({{ site.baseurl }}/images/jg/StreamDeck-JeffGoldblum.png "Stream Deck Jeff Goldblum")&lt;/p&gt;
&lt;p&gt;Code: &lt;a href="https://github.com/AlexHedley/JeffGoldblum"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Publish a Visual Studio Extension from GitHub Actions</title>
			<link>https://alexhedley.github.io/blog/posts/gha-vse</link>
			<description>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/VisualStudioExtension"&gt;post&lt;/a&gt; I discussed starting to create a Visual Studio Extension for &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/gha-vse</guid>
			<pubDate>Sat, 11 Jul 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/VisualStudioExtension"&gt;post&lt;/a&gt; I discussed starting to create a Visual Studio Extension for &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It would be nice to automate new versions to the marketplace.&lt;/p&gt;
&lt;p&gt;There are a number or articles on-line showing how to do this with &lt;a href="https://azure.microsoft.com/en-gb/services/devops/"&gt;ADO&lt;/a&gt; but I wanted to keep all the code and CI/CD in the same GitHub Repo of &lt;a href="https://github.com/praeclarum/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started looking into how to deploy a VSIX to the &lt;a href="https://marketplace.visualstudio.com/"&gt;Marketplace&lt;/a&gt; and came across a very recent blog post &lt;a href="https://david.gardiner.net.au/2020/07/vs-extension-cicd-with-github-actions.html"&gt;CI/CD for Visual Studio extensions with GitHub Actions&lt;/a&gt; from &lt;a href="https://twitter.com/DavidRGardiner"&gt;David Gardiner&lt;/a&gt; which I'm looking forward to reading when more are released but kindly the &lt;a href="https://github.com/flcdrg/VsShowMissing/blob/master/.github/workflows/publish.yml"&gt;GH Action&lt;/a&gt; is already available in a repo &lt;a href="https://github.com/flcdrg/VsShowMissing"&gt;VsShowMissing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So my journey began.&lt;/p&gt;
&lt;p&gt;I created an account on the marketplace and added the necessary details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/publishers/alexhedley"&gt;AlexHedley&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I created a simple VSIX and uploaded it to my own repo and added David's &lt;code&gt;publish.yml&lt;/code&gt;. There's a GHA &lt;code&gt;main.yml&lt;/code&gt; in &lt;code&gt;.github\workflows&lt;/code&gt; for pushing a new build to GH Releases but I'll look at that later. For now I'm happy to just manually building the vsix locally and when I upload to GH Releases the GHA can trigger and publish on the marketplace.&lt;/p&gt;
&lt;p&gt;Looking through the &lt;code&gt;publish.yml&lt;/code&gt; a few places would need to be updated for filenames and paths. I added an &lt;code&gt;Overview.md&lt;/code&gt; and the &lt;code&gt;build\extension-manifest.json&lt;/code&gt; file, with updates.&lt;/p&gt;
&lt;p&gt;During my testing it doesn't seem like any updates to the &lt;code&gt;Overview.md&lt;/code&gt; are being reflected on the marketplace listing. The image didn't upload either. But new versions of the vsix did get uploaded.&lt;/p&gt;
&lt;p&gt;One thing you need to create is a PAT or Personal Access Token. But where do you create this?&lt;/p&gt;
&lt;p&gt;I couldn't find anything specific to a Visual Studio Marketplace extension but there are other articles for &lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;VSCode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure when you create one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;make it accessible to every organization&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Click on "Show all scopes" and scroll down to the &lt;strong&gt;Marketplace&lt;/strong&gt; section and tick all:&lt;/p&gt;
&lt;p&gt;[✔] Read [✔] Acquire [✔] Publish [✔] Manage&lt;/p&gt;
&lt;p&gt;Save this token.&lt;/p&gt;
&lt;p&gt;In the Repo create a new &lt;a href="https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets"&gt;Secret&lt;/a&gt; on the Settings tab, Secrets section, click "New secret" and call it &lt;code&gt;PERSONAL_ACCESS_TOKEN &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This matches the example from the &lt;a href="https://github.com/marketplace/actions/download-assets"&gt;Download Assets&lt;/a&gt; (&lt;a href="https://github.com/i3h/download-release-asset"&gt;Code&lt;/a&gt;) Action.&lt;/p&gt;
&lt;p&gt;Make sure this is the same name in your &lt;code&gt;publish.yml&lt;/code&gt;: &lt;code&gt;${ secrets.PersonalAccessToken }&lt;/code&gt; (This will be double &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now just create a new release and watch the GHA run and upload your extension to the marketplace.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Xamarin CommunityToolkit</title>
			<link>https://alexhedley.github.io/blog/posts/xamarincommunitytoolkit</link>
			<description>&lt;p&gt;The &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit"&gt;Xamarin CommunityToolkit&lt;/a&gt; is a reboot of an old set of helpful additions to Xamarin for example&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/xamarincommunitytoolkit</guid>
			<pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit"&gt;Xamarin CommunityToolkit&lt;/a&gt; is a reboot of an old set of helpful additions to Xamarin for example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Behaviors&lt;/li&gt;
&lt;li&gt;Controls&lt;/li&gt;
&lt;li&gt;Converters&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd raised an &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit/issues/121"&gt;Issue #121&lt;/a&gt; to suggest using &lt;a href="https://alexhedley.github.io/blog/post/DocFX"&gt;DocFX&lt;/a&gt; to build the docs within the repo and started on a &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit/pull/135/files"&gt;PR !135&lt;/a&gt; with some of the structure laid out.&lt;/p&gt;
&lt;p&gt;A comment was made saying &lt;a href="https://docs.microsoft.com/xamarin/"&gt;MS Docs&lt;/a&gt; would be making a repo and to hold off for a little bit.&lt;/p&gt;
&lt;p&gt;Checking back a few weeks later I found the &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit"&gt;Xamarin Community Toolkit Documentation&lt;/a&gt; repo had been made.&lt;/p&gt;
&lt;p&gt;I made a start on porting over some of the work and opened &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit/pull/4"&gt;PR !4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I received some really helpful comments from &lt;a href="https://github.com/davidbritch"&gt;David Britch&lt;/a&gt;, as I'd copied some of the base files from &lt;a href="https://docs.microsoft.com/en-gb/xamarin/essentials/"&gt;Xamarin.Essentials&lt;/a&gt; and not checked they matched the &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit/blob/master/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's just a start to get the shell of the structure there, to make it easier for others to get to the meat of the work but every little bit helps.&lt;/p&gt;
&lt;p&gt;I'm hoping to start on the list above soon, the easier it is to get people started with the Toolkit, hopefully the more contributions will be made towards growing the functionality.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Original info about the Toolkit.&lt;/p&gt;
&lt;p&gt;Profile:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/profiles/FormsCommunityToolkit"&gt;https://www.nuget.org/profiles/FormsCommunityToolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Effects/1.0.0.110-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Effects/1.0.0.110-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Converters/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Converters/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Behaviors/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Behaviors/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Controls/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Controls/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>