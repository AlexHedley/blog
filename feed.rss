<?xml version="1.0" encoding="utf-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0">
	<channel>
		<title />
		<link>https://alexhedley.github.io/blog</link>
		<description />
		<copyright>Copyright © 2023</copyright>
		<pubDate>Fri, 26 May 2023 12:33:50 GMT</pubDate>
		<lastBuildDate>Fri, 26 May 2023 12:33:50 GMT</lastBuildDate>
		<item>
			<title>Utility Blazor</title>
			<link>https://alexhedley.github.io/blog/posts/utility-blazor</link>
			<description>&lt;p&gt;To add to my increasing collection of Utility apps I've decided to produce a &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor"&gt;Blazor&lt;/a&gt; version.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/utility-blazor</guid>
			<pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;To add to my increasing collection of Utility apps I've decided to produce a &lt;a href="https://dotnet.microsoft.com/apps/aspnet/web-apps/blazor"&gt;Blazor&lt;/a&gt; version.&lt;/p&gt;
&lt;p&gt;I love the idea of writing the web app in C#, with minimal js, and being able to host it anywhere.&lt;/p&gt;
&lt;p&gt;Azure Static Web Apps look like a nice option too.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-ca/azure/static-web-apps/deploy-blazor"&gt;Tutorial: Building a static web app with Blazor in Azure Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hanselman.com/blog/BlazorWebAssemblyonAzureStaticWebApps.aspx"&gt;Blazor WebAssembly on Azure Static Web Apps&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The initial site has been configured and is deploying:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://alexhedley.github.io/Utility-Blazor/"&gt;Site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/AlexHedley/Utility-Blazor"&gt;Utility-Blazor Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'm looking forward to trying out &lt;a href="https://github.com/egil/bUnit"&gt;bUnit&lt;/a&gt; for Unit Testing.&lt;/p&gt;
&lt;p&gt;I found a GitHub Action to deploy it to GitHub Pages, just a couple of tasks to modify the ouptut so it runs correctly.&lt;/p&gt;
&lt;p&gt;Much like an AngularJS app you need to set the base href so the app loads properly.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: Change base-tag in index.html from / to blazor-test
  run: sed -i 's/&amp;lt;base href=&amp;quot;\/&amp;quot; \/&amp;gt;/&amp;lt;base href=&amp;quot;\/blazor-test\/&amp;quot; \/&amp;gt;/g' release/wwwroot/index.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To help with routing make the &lt;em&gt;404&lt;/em&gt; the same as the &lt;em&gt;index&lt;/em&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: copy index.html to 404.html
  run: cp release/wwwroot/index.html release/wwwroot/404.html
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As GHP uses jekyll add the following file so it doesnt use those settings.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;- name: Add .nojekyll file
  run: touch release/wwwroot/.nojekyll
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next I just need to port the original feature set to this application.&lt;/p&gt;
&lt;h2 id="references"&gt;References&lt;/h2&gt;
&lt;p&gt;Thanks to &lt;a href="https://github.com/Swimburger"&gt;&amp;#64;Swimburger&lt;/a&gt; for the GitHub Action for deploying the app to GitHub Pages&lt;/p&gt;
&lt;p&gt;How to deploy ASP.NET Blazor WebAssembly to GitHub Pages&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href="https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages"&gt;https://swimburger.net/blog/dotnet/how-to-deploy-aspnet-blazor-webassembly-to-github-pages&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;BlazorGitHubPagesDemo (&lt;a href="https://github.com/Swimburger/BlazorGitHubPagesDemo"&gt;https://github.com/Swimburger/BlazorGitHubPagesDemo&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Jeff Goldblum StreamDeck Action</title>
			<link>https://alexhedley.github.io/blog/posts/jeffgoldblum</link>
			<description>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/StreamDeckToolkit"&gt;post&lt;/a&gt; I discussed the &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;StreamDeck&lt;/a&gt; and adding docs to the .NET toolkit.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/jeffgoldblum</guid>
			<pubDate>Mon, 28 Sep 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/StreamDeckToolkit"&gt;post&lt;/a&gt; I discussed the &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;StreamDeck&lt;/a&gt; and adding docs to the .NET toolkit.&lt;/p&gt;
&lt;p&gt;Whilst watching a stream from &lt;a href="https://www.twitch.tv/jamesmontemagno/"&gt;JM&lt;/a&gt; Aden &lt;a href="https://github.com/jamesmontemagno/MyStreamTimer/issues/36"&gt;suggested&lt;/a&gt; he add a StreamDeck Plugin to &lt;a href="https://www.mystreamtimer.com/"&gt;MyStreamTimer&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream Deck Extension for My Stream Timer | C# | @JamesMontemagno
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/744833142"&gt;https://www.twitch.tv/videos/744833142&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;TODO: Add YouTube link since Twitch expires.&lt;/p&gt;
&lt;p&gt;A couple of weeks later James did a stream for a presentation he was preparing for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Preparing a Presentation! #OBS #StreamDeck #PowerPoint | @JamesMontemagno
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/videos/758464643"&gt;https://www.twitch.tv/videos/758464643&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A project &lt;a href="https://github.com/jamesmontemagno/streamdeck-treecount/"&gt;Tree Count&lt;/a&gt; was created for this.&lt;/p&gt;
&lt;p&gt;Roll forward a couple of hours and &lt;a href="https://twitter.com/mkristensen"&gt;Mads&lt;/a&gt; is on stream, with James producing: &lt;a href="https://www.youtube.com/watch?v=y_nTdXzterM&amp;amp;list=PLReL099Y5nRdG2n1PrY_tbCsUznoYvqkS"&gt;Writing Visual Studio Extensions with Mads - Controlling the clipboard&lt;/a&gt; and he needed some lorem ipsum text. Of course there's only one place you should get filler text and this is &lt;a href="https://jeffsum.com/"&gt;Jeffsum&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This gave me a thought! Why not create an OBS/StreamDeck plugin using &lt;a href="https://github.com/jamesmontemagno/Jeffsum.NET"&gt;Jeffsum.NET&lt;/a&gt; to grab JG quotes.&lt;/p&gt;
&lt;p&gt;![Stream Deck Jeff Goldblum]({{ site.baseurl }}/images/jg/StreamDeck-JeffGoldblum.png "Stream Deck Jeff Goldblum")&lt;/p&gt;
&lt;p&gt;Code: &lt;a href="https://github.com/AlexHedley/JeffGoldblum"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Publish a Visual Studio Extension from GitHub Actions</title>
			<link>https://alexhedley.github.io/blog/posts/gha-vse</link>
			<description>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/VisualStudioExtension"&gt;post&lt;/a&gt; I discussed starting to create a Visual Studio Extension for &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/gha-vse</guid>
			<pubDate>Sat, 11 Jul 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;In a previous &lt;a href="https://alexhedley.github.io/blog/post/VisualStudioExtension"&gt;post&lt;/a&gt; I discussed starting to create a Visual Studio Extension for &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;It would be nice to automate new versions to the marketplace.&lt;/p&gt;
&lt;p&gt;There are a number or articles on-line showing how to do this with &lt;a href="https://azure.microsoft.com/en-gb/services/devops/"&gt;ADO&lt;/a&gt; but I wanted to keep all the code and CI/CD in the same GitHub Repo of &lt;a href="https://github.com/praeclarum/BuildLight"&gt;BuildLight&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I started looking into how to deploy a VSIX to the &lt;a href="https://marketplace.visualstudio.com/"&gt;Marketplace&lt;/a&gt; and came across a very recent blog post &lt;a href="https://david.gardiner.net.au/2020/07/vs-extension-cicd-with-github-actions.html"&gt;CI/CD for Visual Studio extensions with GitHub Actions&lt;/a&gt; from &lt;a href="https://twitter.com/DavidRGardiner"&gt;David Gardiner&lt;/a&gt; which I'm looking forward to reading when more are released but kindly the &lt;a href="https://github.com/flcdrg/VsShowMissing/blob/master/.github/workflows/publish.yml"&gt;GH Action&lt;/a&gt; is already available in a repo &lt;a href="https://github.com/flcdrg/VsShowMissing"&gt;VsShowMissing&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So my journey began.&lt;/p&gt;
&lt;p&gt;I created an account on the marketplace and added the necessary details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/publishers/alexhedley"&gt;AlexHedley&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I created a simple VSIX and uploaded it to my own repo and added David's &lt;code&gt;publish.yml&lt;/code&gt;. There's a GHA &lt;code&gt;main.yml&lt;/code&gt; in &lt;code&gt;.github\workflows&lt;/code&gt; for pushing a new build to GH Releases but I'll look at that later. For now I'm happy to just manually building the vsix locally and when I upload to GH Releases the GHA can trigger and publish on the marketplace.&lt;/p&gt;
&lt;p&gt;Looking through the &lt;code&gt;publish.yml&lt;/code&gt; a few places would need to be updated for filenames and paths. I added an &lt;code&gt;Overview.md&lt;/code&gt; and the &lt;code&gt;build\extension-manifest.json&lt;/code&gt; file, with updates.&lt;/p&gt;
&lt;p&gt;During my testing it doesn't seem like any updates to the &lt;code&gt;Overview.md&lt;/code&gt; are being reflected on the marketplace listing. The image didn't upload either. But new versions of the vsix did get uploaded.&lt;/p&gt;
&lt;p&gt;One thing you need to create is a PAT or Personal Access Token. But where do you create this?&lt;/p&gt;
&lt;p&gt;I couldn't find anything specific to a Visual Studio Marketplace extension but there are other articles for &lt;a href="https://code.visualstudio.com/api/working-with-extensions/publishing-extension"&gt;VSCode&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Make sure when you create one:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;make it accessible to every organization&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Click on "Show all scopes" and scroll down to the &lt;strong&gt;Marketplace&lt;/strong&gt; section and tick all:&lt;/p&gt;
&lt;p&gt;[✔] Read [✔] Acquire [✔] Publish [✔] Manage&lt;/p&gt;
&lt;p&gt;Save this token.&lt;/p&gt;
&lt;p&gt;In the Repo create a new &lt;a href="https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets"&gt;Secret&lt;/a&gt; on the Settings tab, Secrets section, click "New secret" and call it &lt;code&gt;PERSONAL_ACCESS_TOKEN &lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This matches the example from the &lt;a href="https://github.com/marketplace/actions/download-assets"&gt;Download Assets&lt;/a&gt; (&lt;a href="https://github.com/i3h/download-release-asset"&gt;Code&lt;/a&gt;) Action.&lt;/p&gt;
&lt;p&gt;Make sure this is the same name in your &lt;code&gt;publish.yml&lt;/code&gt;: &lt;code&gt;${ secrets.PersonalAccessToken }&lt;/code&gt; (This will be double &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Now just create a new release and watch the GHA run and upload your extension to the marketplace.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Xamarin CommunityToolkit</title>
			<link>https://alexhedley.github.io/blog/posts/xamarincommunitytoolkit</link>
			<description>&lt;p&gt;The &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit"&gt;Xamarin CommunityToolkit&lt;/a&gt; is a reboot of an old set of helpful additions to Xamarin for example&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/xamarincommunitytoolkit</guid>
			<pubDate>Fri, 10 Jul 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit"&gt;Xamarin CommunityToolkit&lt;/a&gt; is a reboot of an old set of helpful additions to Xamarin for example&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Behaviors&lt;/li&gt;
&lt;li&gt;Controls&lt;/li&gt;
&lt;li&gt;Converters&lt;/li&gt;
&lt;li&gt;Effects&lt;/li&gt;
&lt;li&gt;Extensions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I'd raised an &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit/issues/121"&gt;Issue #121&lt;/a&gt; to suggest using &lt;a href="https://alexhedley.github.io/blog/post/DocFX"&gt;DocFX&lt;/a&gt; to build the docs within the repo and started on a &lt;a href="https://github.com/xamarin/XamarinCommunityToolkit/pull/135/files"&gt;PR !135&lt;/a&gt; with some of the structure laid out.&lt;/p&gt;
&lt;p&gt;A comment was made saying &lt;a href="https://docs.microsoft.com/xamarin/"&gt;MS Docs&lt;/a&gt; would be making a repo and to hold off for a little bit.&lt;/p&gt;
&lt;p&gt;Checking back a few weeks later I found the &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit"&gt;Xamarin Community Toolkit Documentation&lt;/a&gt; repo had been made.&lt;/p&gt;
&lt;p&gt;I made a start on porting over some of the work and opened &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit/pull/4"&gt;PR !4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I received some really helpful comments from &lt;a href="https://github.com/davidbritch"&gt;David Britch&lt;/a&gt;, as I'd copied some of the base files from &lt;a href="https://docs.microsoft.com/en-gb/xamarin/essentials/"&gt;Xamarin.Essentials&lt;/a&gt; and not checked they matched the &lt;a href="https://github.com/MicrosoftDocs/xamarin-communitytoolkit/blob/master/CONTRIBUTING.md"&gt;Contributing Guidelines&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It's just a start to get the shell of the structure there, to make it easier for others to get to the meat of the work but every little bit helps.&lt;/p&gt;
&lt;p&gt;I'm hoping to start on the list above soon, the easier it is to get people started with the Toolkit, hopefully the more contributions will be made towards growing the functionality.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Original info about the Toolkit.&lt;/p&gt;
&lt;p&gt;Profile:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/profiles/FormsCommunityToolkit"&gt;https://www.nuget.org/profiles/FormsCommunityToolkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Packages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Effects/1.0.0.110-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Effects/1.0.0.110-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Converters/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Converters/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Behaviors/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Behaviors/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.nuget.org/packages/FormsCommunityToolkit.Controls/1.0.0.66-beta"&gt;https://www.nuget.org/packages/FormsCommunityToolkit.Controls/1.0.0.66-beta&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Visual Studio Extensions</title>
			<link>https://alexhedley.github.io/blog/posts/visualstudioextension</link>
			<description>&lt;p&gt;Visual Studio Extensions are a fantastic way to add extra functionality to the &lt;a href="https://visualstudio.microsoft.com/"&gt;IDE&lt;/a&gt;.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/visualstudioextension</guid>
			<pubDate>Sun, 21 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;Visual Studio Extensions are a fantastic way to add extra functionality to the &lt;a href="https://visualstudio.microsoft.com/"&gt;IDE&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;There is a whole &lt;a href="https://docs.microsoft.com/en-us/visualstudio/extensibility/visual-studio-sdk?view=vs-2019"&gt;SDK&lt;/a&gt; to play around with.&lt;/p&gt;
&lt;p&gt;Then the &lt;a href="https://marketplace.visualstudio.com/"&gt;Marketplace&lt;/a&gt; for Windows and &lt;a href="https://addins.monodevelop.com/"&gt;Add-Ins&lt;/a&gt; for Mac.&lt;/p&gt;
&lt;p&gt;I've gotten a peak with the &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;Build Light&lt;/a&gt; extension I've help build to see it from both sides.&lt;/p&gt;
&lt;p&gt;I've also watched &lt;a href="https://twitter.com/brianlagunas"&gt;@BrianLagunas&lt;/a&gt; show off some of the code needed for the &lt;a href="https://marketplace.visualstudio.com/items?itemName=BrianLagunas.PrismTemplatePack"&gt;Prism Template Pack&lt;/a&gt; wizard on his streams:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=AtDFiYFuYjY"&gt;Adding Solution Folders and Moving Projects with a Custom IWizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ht70QlGt7bU"&gt;Using a .NET Core Template as a Visual Studio Project Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=WhbG9i8-X9o"&gt;Finishing the Project Template IWizard&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=a5vJ7O00WoQ"&gt;We Found a Bug in the Visual Studio Extensibility APIs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=Ht70QlGt7bU"&gt;Using a .NET Core Template as a Visual Studio Project Template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/watch?v=zuzmH5K6su8"&gt;Fixing Issue 2004: Prism's New Project Wizard Deletes Everything&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Watch this space for more info after I've had some time to look into it more.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Twitch</title>
			<link>https://alexhedley.github.io/blog/posts/twitch</link>
			<description>&lt;p&gt;I've finally jumped on the Twitch Streaming bandwagon.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/twitch</guid>
			<pubDate>Sat, 20 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;I've finally jumped on the Twitch Streaming bandwagon.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.twitch.tv/alexhedley8"&gt;alexhedley8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/playlist?list=PL_HSdprUDuLykPAunhmNNq7CFoclCsqs-"&gt;YouTube Archive&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I've been watching a few people for the last year including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://twitch.tv/JamesMontemagno"&gt;JamesMontemagno&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitch.tv/FrankKrueger"&gt;FrankKrueger&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitch.tv/BrianLagunas"&gt;BrianLagunas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitch.tv/csharpfritz"&gt;csharpfritz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://twitch.tv/dansiegel"&gt;dansiegel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I decided it might be good to start streaming some stuff I work on.&lt;/p&gt;
&lt;p&gt;I used to record &lt;a href="https://www.youtube.com/user/599CDTechHelp"&gt;videos&lt;/a&gt; for &lt;a href="http://www.599cd.com/"&gt;599CD&lt;/a&gt; a fews years back when I had more time on my hands but planning them out. Running through the content then recording and sometimes editing. This could take a while. I was always hoping to do it more often so I'd get better at it and it would take less time with more practice.&lt;/p&gt;
&lt;p&gt;Setting up the office properly I started putting a list together of equipment I'd need and the purchasing began.&lt;/p&gt;
&lt;p&gt;I took advice from a few of the above and started making a &lt;a href="https://gist.github.com/AlexHedley/67ae90dcab192a20ef51209242f7928e"&gt;list&lt;/a&gt; and sourcing the equipment.&lt;/p&gt;
&lt;p&gt;Not being the best time to get stock during a global pandemic, being everyone was buying webcams etc for their own home setup.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://focusrite.com/en/usb-audio-interface/scarlett/scarlett-solo"&gt;Focusrite Scarlett Solo 3rd Gen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eu.audio-technica.com/AT2020"&gt;Audio Technica AT2020&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.razer.com/gaming-broadcaster/razer-kiyo"&gt;Razer Kiyo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;Stream Deck&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mic arm&lt;/li&gt;
&lt;li&gt;Pop Filter&lt;/li&gt;
&lt;li&gt;peripherals - cables etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then I needed some artwork for scenes etc.&lt;/p&gt;
&lt;p&gt;I'm no artist so I took some inspiration for other streamers for layout and positioning of elements and then grabbed some logos from my &lt;a href="http://alexhedley.com/"&gt;website&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next up was the software.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://obsproject.com/"&gt;Obs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://streamlabs.com/"&gt;Streamlabs&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;Add the extensions for followers, alerts etc&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.mystreamtimer.com/"&gt;My Stream Timer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://carnackeys.com/"&gt;Carnac&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Build Light</title>
			<link>https://alexhedley.github.io/blog/posts/buildlight</link>
			<description>&lt;p&gt;&lt;a href="https://github.com/praeclarum/BuildLight"&gt;Build Light&lt;/a&gt; is a way to &lt;em&gt;display your IDE's build status using RGB LEDs and IoT devices!&lt;/em&gt;&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/buildlight</guid>
			<pubDate>Sat, 20 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;a href="https://github.com/praeclarum/BuildLight"&gt;Build Light&lt;/a&gt; is a way to &lt;em&gt;display your IDE's build status using RGB LEDs and IoT devices!&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It's being built by &lt;a href="http://twitter.com/praeclarum"&gt;&amp;#64;praeclarum&lt;/a&gt; on his &lt;a href="https://twitch.tv/FrankKrueger"&gt;Twitch&lt;/a&gt; channel the last few sunday nights.&lt;/p&gt;
&lt;p&gt;It's an ESP32 device running a mini web server that when connected to a set of RGB lights will toggle the colour from red (for a failed build) to green (for a successful build) in Visual Studio for Mac.&lt;/p&gt;
&lt;p&gt;It even has support in Alexa so you can turn it on and off.&lt;/p&gt;
&lt;p&gt;For my first Twitch stream (&lt;a href="https://www.youtube.com/watch?v=It13T8YBX8g"&gt;YouTube Archive&lt;/a&gt;) I built the Windows version of the Build Light Extension. See &lt;a href="https://github.com/praeclarum/BuildLight/pull/7"&gt;PR !7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This was a fun new challenge having never worked in the &lt;a href="https://docs.microsoft.com/en-us/visualstudio/extensibility/visual-studio-sdk?view=vs-2019"&gt;VS SDK&lt;/a&gt; before.&lt;/p&gt;
&lt;p&gt;I'm hoping to spend some mode time in this SDK for both Mac and Win and write up what I find.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>StreamDeck Toolkit</title>
			<link>https://alexhedley.github.io/blog/posts/streamdecktoolkit</link>
			<description>&lt;p&gt;The &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;Stream Deck&lt;/a&gt; is an awesome gadget to use whilst streaming. It allows you to configure buttons to perform any number of actions. This could be changing scene whilst streaming, playing some sounds, opening an app, running a set of actions, the list is endless.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/streamdecktoolkit</guid>
			<pubDate>Sun, 07 Jun 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;The &lt;a href="https://www.elgato.com/en/gaming/stream-deck"&gt;Stream Deck&lt;/a&gt; is an awesome gadget to use whilst streaming. It allows you to configure buttons to perform any number of actions. This could be changing scene whilst streaming, playing some sounds, opening an app, running a set of actions, the list is endless.&lt;/p&gt;
&lt;p&gt;![Stream Deck]({{ site.baseurl }}/images/sdt/streamdeck.png "Stream Deck")&lt;/p&gt;
&lt;p&gt;Whilst watching &lt;a href="https://www.twitch.tv/csharpfritz"&gt;csharpfritz&lt;/a&gt; om twitch I checked the archives and found the following playlist for the &lt;a href="https://www.youtube.com/playlist?list=PLVMqA0_8O85xhVTS3OkTOKhe6IIYj7Tna"&gt;StreamDeck Toolkit&lt;/a&gt; where a plugin system written in .NET was built to make it easy to make your own button actions.&lt;/p&gt;
&lt;p&gt;With my new love of using &lt;a href="https://alexhedley.github.io/blog/post/DocFX"&gt;DocFX&lt;/a&gt; I thought I'd help out and contribute to the documentation for the toolkit.&lt;/p&gt;
&lt;p&gt;It didn't take long to spin up a site, move some of the existing documentation over and start adding new items, it was merged on stream on 7th June 2020 (adding YouTube link when published)&lt;/p&gt;
&lt;p&gt;You can see the &lt;a href="https://github.com/FritzAndFriends/StreamDeckToolkit/pull/150"&gt;PR !150&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What's great is there's a workflow with GH Actions to auto build when new content is added.&lt;/p&gt;
&lt;p&gt;You can find the &lt;a href="https://fritzandfriends.github.io/StreamDeckToolkit/articles/intro.html"&gt;Docs&lt;/a&gt; and start building your own today.&lt;/p&gt;
&lt;p&gt;I may add one for &lt;a href="https://alexhedley.github.io/blog/post/BuildLight"&gt;BuildLight&lt;/a&gt;&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>DocFX</title>
			<link>https://alexhedley.github.io/blog/posts/docfx</link>
			<description>&lt;p&gt;There are a number of options to build static sites these days.&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/docfx</guid>
			<pubDate>Tue, 19 May 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;There are a number of options to build static sites these days.&lt;/p&gt;
&lt;p&gt;My current blog is built using &lt;a href="https://github.com/barryclark/jekyll-now"&gt;Jekyll Now&lt;/a&gt; which is great static site which uses &lt;a href="https://daringfireball.net/projects/markdown/syntax"&gt;Markdown&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another tool I've used is &lt;a href="https://www.mkdocs.org/"&gt;MkDocs&lt;/a&gt;, this has been helpful as it allowed me to quickly contribute to &lt;a href="https://alexhedley.github.io/MFractor-Documentation"&gt;MFractor&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;But with me working with .NET predominantly it makes sense to use the tooling MS use. This is &lt;a href="https://dotnet.github.io/docfx/"&gt;DocFX&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For a great customised version of this see &lt;a href="https://prismlibrary.com/docs/"&gt;Prism Library Docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;One thing I love about the jekyll based sites is you can use them with GitHub Pages. Just push and it auto builds.&lt;/p&gt;
&lt;p&gt;For MkDocs this allows a command to push &lt;code&gt;mkdocs gh-deploy&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;I'd like the same for DocFX but this doesn't currently exist out of the box.&lt;/p&gt;
&lt;p&gt;Time to use &lt;a href="https://github.com/features/actions"&gt;GitHub Actions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Researching first to see if anyone had got it working yet I found:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/dotnet/docfx/issues/3284"&gt;3284&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.community/t5/GitHub-Actions/Github-action-not-triggering-gh-pages-upon-push/td-p/26869/highlight/true/page/3"&gt;Community&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From here I tried a few ideas:&lt;/p&gt;
&lt;p&gt;Create a new file under the following folder:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;.github/workflows/&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;main.yml&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Add the following:&lt;/p&gt;
&lt;p&gt;Setup which branch will trigger the action to run:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;on:
  push:
    branches:
      - master
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we need to run a job on an OS:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;jobs:
  deploy:
    runs-on: ubuntu-latest 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we need to build the DocFX site, this is done locally running the following command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;docfx docfx.json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will build the site the chosen path from the above &lt;code&gt;.json&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-json"&gt;"dest": "_site",
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Luckily this GitHub Action has already been built:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/marketplace/actions/docfx-action"&gt;docfx-action&lt;/a&gt;&lt;/strong&gt; from &lt;a href="https://github.com/nikeee"&gt;nikeee&lt;/a&gt; Niklas Mollenhauer&lt;/p&gt;
&lt;p&gt;Just add the following &lt;strong&gt;step&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;      - name: docfx-action
        uses: nikeee/docfx-action@v0.1.0
        with:
          args: docfx.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If your &lt;code&gt;docfx.json&lt;/code&gt; is in another location update the &lt;code&gt;args&lt;/code&gt; input accordingly.&lt;/p&gt;
&lt;p&gt;One thing to note is we can't use &lt;code&gt;windows-latest&lt;/code&gt; as we get an error with the "docfx-action".&lt;/p&gt;
&lt;p&gt;&lt;code&gt;##[error]Container action is only supported on Linux&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now that the site is built we want to publish it to GitHub Pages:&lt;/p&gt;
&lt;p&gt;Again there's an Action already built for this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://github.com/peaceiris/actions-gh-pages"&gt;GitHub Actions for GitHub Pages&lt;/a&gt;&lt;/strong&gt; from &lt;a href="https://github.com/peaceiris"&gt;peaceiris&lt;/a&gt; Shohei Ueda&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          github_token: ${ secrets.GITHUB_TOKEN }
          publish_dir: ./_site
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: use double "{" and "}" around the &lt;code&gt;github_token&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you have changed your &lt;code&gt;dest&lt;/code&gt; to another folder name update the &lt;code&gt;publish_dir&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;All GHA have a &lt;code&gt;GITHUB_TOKEN&lt;/code&gt; automatically generated when they run so you can use this in your action.&lt;/p&gt;
&lt;p&gt;See &lt;a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-github_token"&gt;github_token&lt;/a&gt; for more info.&lt;/p&gt;
&lt;p&gt;Push this &lt;code&gt;yml&lt;/code&gt; file to your repo and push to your trigger branch, then click on the "Actions" tab and see it run.&lt;/p&gt;
&lt;p&gt;This now means you don't have to build it locally, then push to the &lt;code&gt;gh-pages&lt;/code&gt; branch manually to deploy it online.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="code"&gt;Code&lt;/h2&gt;
&lt;pre&gt;&lt;code class="language-yml"&gt;name: github pages

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: docfx-action
        uses: nikeee/docfx-action@v0.1.0
        with:
          args: docfx.json
      
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3.6.1
        with:
          github_token: ${ secrets.GITHUB_TOKEN }
          publish_dir: ./_site
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: use double "{" and "}" around the &lt;code&gt;github_token&lt;/code&gt;.&lt;/p&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
		<item>
			<title>Poor Mans TSql Formatter</title>
			<link>https://alexhedley.github.io/blog/posts/poormanstsqlformatter</link>
			<description>&lt;p&gt;&lt;a href="http://architectshack.com/PoorMansTSqlFormatter.ashx"&gt;PoorMansTSqlFormatter&lt;/a&gt; is&lt;/p&gt;</description>
			<author>AlexHedley</author>
			<guid>https://alexhedley.github.io/blog/posts/poormanstsqlformatter</guid>
			<pubDate>Sun, 17 May 2020 00:00:00 GMT</pubDate>
			<content:encoded>&lt;p&gt;&lt;a href="http://architectshack.com/PoorMansTSqlFormatter.ashx"&gt;PoorMansTSqlFormatter&lt;/a&gt; is&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This is a free and open-source SQL (T-SQL) formatter&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's a fantasic tool with plugins for SSMS, VS Code, there's a website &lt;a href="http://poorsql.com/"&gt;Poor SQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you want to use this in a .NET app you can pull the &lt;a href="https://www.nuget.org/packages/PoorMansTSQLFormatter/"&gt;NuGet&lt;/a&gt; which is currently at version 1.4.3.1, but the current &lt;a href="https://github.com/TaoK/PoorMansTSqlFormatter/releases"&gt;release&lt;/a&gt; is 1.6.13.&lt;/p&gt;
&lt;p&gt;To try it out I downloaded the WinForms App to see what options there are.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;WinForms App (simple exe): SqlFormatterWinforms.1.6.13.zip (1644 downloads this version, about 32000 for previous versions)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I then decompiled the &lt;em&gt;SqlFormatterWinforms.exe&lt;/em&gt; to see how to setup the formatter.&lt;/p&gt;
&lt;p&gt;Another way would be to look at the &lt;a href="https://github.com/TaoK/PoorMansTSqlFormatter/tree/master/PoorMansTSqlFormatterDemo"&gt;Demo&lt;/a&gt; code on GitHub.&lt;/p&gt;
&lt;p&gt;Then look into the &lt;a href="https://github.com/TaoK/PoorMansTSqlFormatter/blob/master/PoorMansTSqlFormatterDemo/MainForm.cs"&gt;MainForm.cs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you wish to run the app you will need to build the &lt;a href="https://github.com/TaoK/PoorMansTSqlFormatter/tree/master/PoorMansTSqlFormatterLib"&gt;Lib&lt;/a&gt; so the app can use the DLL.&lt;/p&gt;
&lt;p&gt;![PoorMansTSqlFormatter]({{ site.baseurl }}/images/pmtf/pmtf_1.png &amp;quot;PoorMansTSqlFormatter Demo App&amp;quot;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DoFormatting()&lt;/code&gt; is the method which converts your SQL string into the formatted code so this contains a number of items we need to get the basics working.&lt;/p&gt;
&lt;p&gt;I created a Console App, added the NuGet and started my journey.&lt;/p&gt;
&lt;p&gt;First we need a &lt;code&gt;tokenizer&lt;/code&gt;, a &lt;code&gt;parser&lt;/code&gt; and &lt;code&gt;formatter&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;private static ISqlTokenizer _tokenizer;
private static ISqlTokenParser _parser;
private static ISqlTreeFormatter _formatter;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can set the defaults for these&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;_tokenizer = (ISqlTokenizer)new TSqlStandardTokenizer();
_parser = (ISqlTokenParser)new TSqlStandardParser();
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The formatter needs a few options.
Unfortunately &lt;code&gt;TSqlStandardFormatterOptions&lt;/code&gt; isn't in this version of the NuGet.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string indentString = &amp;quot;\t&amp;quot;;
int spacesPerTab = 4;
int maxLineWidth = 999;
bool expandCommaLists = true;
bool trailingCommas = false;
bool spaceAfterExpandedComma = false;
bool expandBooleanExpressions = true;
bool expandCaseStatements = true;
bool expandBetweenConditions = true;
bool breakJoinOnSections = false;
bool uppercaseKeywords = true;
bool htmlColoring = true;
bool keywordStandardization = false;

ISqlTreeFormatter underlyingFormatter = new TSqlStandardFormatter(indentString, spacesPerTab, maxLineWidth, expandCommaLists, trailingCommas, spaceAfterExpandedComma, expandBooleanExpressions, expandCaseStatements, expandBetweenConditions, breakJoinOnSections, uppercaseKeywords, htmlColoring, keywordStandardization);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next we can create the &lt;code&gt;formatter&lt;/code&gt; using the options above from the &lt;code&gt;underlyingFormatter&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;_formatter = (ISqlTreeFormatter)new HtmlPageWrapper(underlyingFormatter);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next create a sample piece of sql:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-sql"&gt;Select * from table
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;var sqlString = &amp;quot;Select * from table&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And pass it to the tokenizer:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;ITokenList tokenList = _tokenizer.TokenizeSQL(sqlString);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;With a token list available we can parse this sql:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;XmlDocument sql = _parser.ParseSQL(tokenList);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You may notice the &lt;code&gt;Node&lt;/code&gt; type in the code.&lt;/p&gt;
&lt;p&gt;Now that the SQL is in an &lt;code&gt;XMLDocument&lt;/code&gt; we can format it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-csharp"&gt;string formattedSql = _formatter.FormatSQLTree(sql);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will produce a HTML doc which you can display in a browser control.&lt;/p&gt;
&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;!DOCTYPE html &amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;style type=&amp;quot;text/css&amp;quot;&amp;gt;
.SQLCode {
	font-size: 13px;
	font-weight: bold;
	font-family: monospace;;
	white-space: pre;
    -o-tab-size: 4;
    -moz-tab-size: 4;
    -webkit-tab-size: 4;
}
.SQLComment {
	color: #00AA00;
}
.SQLString {
	color: #AA0000;
}
.SQLFunction {
	color: #AA00AA;
}
.SQLKeyword {
	color: #0000AA;
}
.SQLOperator {
	color: #777777;
}
.SQLErrorHighlight {
	background-color: #FFFF00;
}


&amp;lt;/style&amp;gt;
&amp;lt;pre class=&amp;quot;SQLCode&amp;quot;&amp;gt;&amp;lt;span class=&amp;quot;SQLKeyword&amp;quot;&amp;gt;SELECT&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;SQLOperator&amp;quot;&amp;gt;*&amp;lt;/span&amp;gt;
&amp;lt;span class=&amp;quot;SQLKeyword&amp;quot;&amp;gt;FROM&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;SQLKeyword&amp;quot;&amp;gt;TABLE&amp;lt;/span&amp;gt;
&amp;lt;/pre&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this is in &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tags the newline characters matter for formatting.&lt;/p&gt;
&lt;p&gt;Ouput:&lt;/p&gt;
&lt;!DOCTYPE html &gt;
&lt;html&gt;
&lt;head&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;style type="text/css"&gt;
    .SQLCode {
        font-size: 13px;
        font-weight: bold;
        font-family: monospace;;
        white-space: pre;
        -o-tab-size: 4;
        -moz-tab-size: 4;
        -webkit-tab-size: 4;
    }
    .SQLComment {
        color: #00AA00;
    }
    .SQLString {
        color: #AA0000;
    }
    .SQLFunction {
        color: #AA00AA;
    }
    .SQLKeyword {
        color: #0000AA;
    }
    .SQLOperator {
        color: #777777;
    }
    .SQLErrorHighlight {
        background-color: #FFFF00;
    }
&lt;/style&gt;
&lt;pre class="SQLCode"&gt;&lt;span class="SQLKeyword"&gt;SELECT&lt;/span&gt; &lt;span class="SQLOperator"&gt;*&lt;/span&gt;
&lt;span class="SQLKeyword"&gt;FROM&lt;/span&gt; &lt;span class="SQLKeyword"&gt;TABLE&lt;/span&gt;
&lt;/pre&gt;
&lt;/body&gt;
&lt;/html&gt;
</content:encoded>
			<comments xmlns="http://purl.org/rss/1.0/modules/slash/">0</comments>
		</item>
	</channel>
</rss>